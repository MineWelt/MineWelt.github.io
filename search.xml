<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BeautifulSoup</title>
      <link href="/2020/01/16/BeautifulSoup/"/>
      <url>/2020/01/16/BeautifulSoup/</url>
      
        <content type="html"><![CDATA[<h3 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h3><p>▲ 自动将输入文档转换成 Unicode 编码， 输出文档转换成 UTF-8 编码.</p><ul><li>BeautifulSoup 类的基本元素</li></ul><table><thead><tr><th>基本元素</th><th align="center">说明</th></tr></thead><tbody><tr><td>Tag</td><td align="center">标签，最基本的信息组织单元, 分别用&lt;&gt;和&lt;/&gt;标明开头和结尾, 通过 soup.tag 的形式获取标签的信息</td></tr><tr><td>Name</td><td align="center">标签的名字, <p>…</p> 的标签名字是 p ,格式 : soup.tag.name</td></tr><tr><td>Atrributes</td><td align="center">标签的属性，字典形式组织, 格式：tag.attrs</td></tr><tr><td>NavigableString</td><td align="center">标签内非属性字符串, &lt;&gt;…&lt;/&gt;中字符串, 格式：tag.string</td></tr></tbody></table><p>▲ demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">demo = r.text</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(demo, <span class="string">'lxml'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">print(soup.prettify())   <span class="comment">#更为美观的输出 html 语法.</span></span></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> &lt;head&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  &lt;title&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   This <span class="keyword">is</span> a python demo page</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  &lt;/title&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> &lt;/head&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &lt;p class="title"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">   &lt;b&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    The demo python introduces several python courses.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">   &lt;/b&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  &lt;/p&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  &lt;p class="course"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">   Python <span class="keyword">is</span> a wonderful general-purpose programming language. You can learn Python <span class="keyword">from</span> novice to professional by tracking the following courses:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">   &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    Basic Python</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">   &lt;/a&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">and</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">   &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    Advanced Python</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">   &lt;/a&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">   .</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  &lt;/p&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"> &lt;/body&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&lt;/html&gt;</span></pre></td></tr></table></figure><ul><li>BeautifulSoup 支持的解析器</li></ul><table><thead><tr><th>解析器</th><th align="center">使用方法</th></tr></thead><tbody><tr><td>Python标准库</td><td align="center">BeautifulSoup(markup, ‘html.parser’)</td></tr><tr><td>lxml HTML解析器</td><td align="center">BeautifulSoup(markup, ‘lxml’)</td></tr><tr><td>lxml XML解析器</td><td align="center">BeautifulSoup(markup, ‘xml’)</td></tr><tr><td>html5lib</td><td align="center">BeautifulSoup(markup, ‘html5lib’)</td></tr></tbody></table><p>lxml解析器有 HTML 和 XML 的功能, 强大且速度快, 所以我们常用的是 lxml 解析器.</p><p>用法:<br><code>soup = BeautifulSoup(html, &#39;lxml&#39;)</code></p><p>实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">html = <span class="string">'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;p class="title" name="dormouse"&gt;&lt;b&gt;This is a demo&lt;/b&gt;&lt;/p&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;meta property="og:type" content="website"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;meta property="og:title" content="Lihao"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;meta property="og:url" content="https:&amp;#x2F;&amp;#x2F;minewelt.github.io&amp;#x2F;index.html"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;meta property="og:site_name" content="Lihao"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;meta property="og:locale" content="zh-CN"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;meta name="twitter:card" content="summary"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">soup = bs(html, <span class="string">'lxml'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">print(soup.p.string)</span></pre></td></tr></table></figure><p>运行结果就是:</p><p><code>This is a demo</code></p><p><code>soup.p.string</code> 的意思就是打印出 title 节点里面的字符内容</p><p>其实任何存在于 html 语法得标签都可以使用 <code>soup.tag</code>  （tag 就是 html 语法中的标签）的方式获取, 如果同样的节点名称有多个，则只取第一个节点的内容.</p><p>获取标签的名字的方法是 <code>soup.tag.name</code></p><p>获取标签的父标签的方法是 <code>soup.tag.parent.name</code></p><h3 id="内容遍历"><a href="#内容遍历" class="headerlink" title="内容遍历"></a>内容遍历</h3><ul><li>上行遍历 <code>for parent in soup.a.parents:</code></li></ul><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.parent</td><td>节点的父亲标签</td></tr><tr><td>.parents</td><td>节点先辈标签的迭代类型, 用于循环遍历先辈节点</td></tr></tbody></table><ul><li>下行遍历</li></ul><p>1、 遍历儿子节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    print(child)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">``` </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>、 遍历子孙节点</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">```python</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    print(child)</span></pre></td></tr></table></figure><hr><p>疑问：为什么如果直接传入 html 代码的时候，要 <code>print(soup.tag.string)</code> 就会显示标签下的字符串, 而如果传入一个 url 的 text 文本就需要 <code>print(tag.string)</code> 才可以 , 因为当用 <code>print(soup.tag.string)</code> 的时候会报错: <code>AttributeError: &#39;NoneType&#39; object has no attribute &#39;string&#39;</code></p><p>由此, 产生了一个疑问, “soup.” 加不加到底有什么区别 ?</p><p>一经思考, 发现这是一个很简单的问题, 甚至当我刚把疑问敲下来的瞬间就已经想出了问题的答案. “soup.” 加这个前缀就是为了一种索引的功能. 而我的源代码是：<code>for child in soup.title.children:</code></p><p>这样，就是已经令 child 代替了 soup.title.children</p><p>就不需要再纠结了…</p><hr><h3 id="方法选择器"><a href="#方法选择器" class="headerlink" title="方法选择器"></a>方法选择器</h3><h4 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a>find_all()</h4><p>(是不是让你想到了正则表达式里面的findall(), 如果忘了快去复习一下吧<del>~</del>)</p><p>API: <code>find_all(name, attrs, recursive, text, **kwargs)</code></p><ul><li><p>name : 根据节点名查询元素</p></li><li><p>attrs : 传入属性来查询元素</p></li><li><p>text : 匹配节点的文本，传入的形式可以是字符串也可以是正则表达式对象.</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pyquery</title>
      <link href="/2020/01/15/pyquery/"/>
      <url>/2020/01/15/pyquery/</url>
      
        <content type="html"><![CDATA[<p>初始化 pyquery 的时候不仅可以传入 HTML 文档， 还可以直接传入传入 URL 和 本地文件.</p><h4 id="1、-初始化"><a href="#1、-初始化" class="headerlink" title="1、 初始化"></a>1、 初始化</h4><ul><li>html字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">html = <span class="string">'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;div id="error-notice-container"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">      &lt;div id="error-notice" class="notice-hide" role="alert"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">        &lt;span id="error-notice-icon"&gt;&lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="string">        &lt;span id="error-notice-msg"&gt;&lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="string">        &lt;span id="error-notice-link" class="ripple" tabindex="0" role="button"&gt;&lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="string">      &lt;/div&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="string">    &lt;/div&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">doc = pq(html)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">print(doc(<span class="string">'span'</span>))</span></pre></td></tr></table></figure><p>这样, 就把 div 节点的内容打印出来了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;span id&#x3D;&quot;error-notice-icon&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        &lt;span id&#x3D;&quot;error-notice-msg&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        &lt;span id&#x3D;&quot;error-notice-link&quot; class&#x3D;&quot;ripple&quot; tabindex&#x3D;&quot;0&quot; role&#x3D;&quot;button&quot;&#x2F;&gt;</span></pre></td></tr></table></figure><ul><li>URL 初始化</li></ul><p>比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">headers = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">doc = pq(url = <span class="string">'https://maoyan.com/board/4?offset=0'</span>, headers=headers)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">print(doc(<span class="string">'title'</span>))</span></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;title&gt;TOP100榜 - 猫眼电影 - 一网打尽好电影&lt;&#x2F;title&gt;</span></pre></td></tr></table></figure><ul><li>文件初始化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">doc = pq(filename = <span class="string">'demo.html'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">print(doc(<span class="string">'li'</span>))</span></pre></td></tr></table></figure><p>这就要求本地有一个名为 demo.html 的文件夹，内容是 html 代码.</p><h4 id="2-、基本-CSS-选择器"><a href="#2-、基本-CSS-选择器" class="headerlink" title="2 、基本 CSS 选择器"></a>2 、基本 CSS 选择器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">html = <span class="string">'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;div id="error-notice-container"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">      &lt;div id="error-notice" class="notice-hide" role="alert"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">        &lt;span id="error-notice-icon"&gt;&lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="string">        &lt;span id="error-notice-msg"&gt;&lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="string">        &lt;span id="error-notice-link" class="ripple" tabindex="0" role="button"&gt;&lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="string">      &lt;/div&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="string">    &lt;/div&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">doc = pq(html)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">print(doc(<span class="string">'#error-notice-container .notice-hide span'</span>))</span></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;span id&#x3D;&quot;error-notice-icon&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        &lt;span id&#x3D;&quot;error-notice-msg&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        &lt;span id&#x3D;&quot;error-notice-link&quot; class&#x3D;&quot;ripple&quot; tabindex&#x3D;&quot;0&quot; role&#x3D;&quot;button&quot;&#x2F;&gt;</span></pre></td></tr></table></figure><p>在初始化PyQuery 对象之后， 我们传入了一个CSS选择器 #error-notice-container .notice-hide span 意思就是先选取 id 为 error-notice-container 的节点, 然后选取内部的 class 为 notice-hide 的节点内部所有的 span 节点.(好吧，读起来很绕口，根据代码理解更好)</p><h4 id="3、查找节点"><a href="#3、查找节点" class="headerlink" title="3、查找节点"></a>3、查找节点</h4><p>·1</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ps[图片转换成Gif格式]</title>
      <link href="/2020/01/09/Ps-%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E6%88%90Gif%E6%A0%BC%E5%BC%8F/"/>
      <url>/2020/01/09/Ps-%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E6%88%90Gif%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>表情包横行的今天，一言不合对方就丢来一个Gif动图. 这让我们有了一个初步的认识， “ 哦，原来 Gif 是动图的标志. 是的，gif是一种比较常用的动态图像格式，多数是由多帧图像合并在一起组成的gif动画，当然也有单帧的。gif文件几乎可以使用任何格式的gif播放器打开，比如常用的flash、看图软件、gif动画制作软件等等。</p><p>现在我们就要尝试把一张不是动图的图片转换成 Gif 格式.</p><p>想到转换，我电脑里现存的图片处理软件只有 Photoshop , 回想起之前做好图片之后的 “ 导出为 ” ， 我豁然开朗.</p><p><img src="https://i.loli.net/2020/01/09/dB4SXzPiFLn9sZR.png" alt></p><p><img src="https://i.loli.net/2020/01/09/MLkOnvwbo56e3ra.png" alt></p><p>一顿操作，发现…好像不行</p><p>然后百度发现可以先导出为 Web 的格式，然后再打开之后保存图片即可.如下：</p><p><img src="https://i.loli.net/2020/01/09/B68ip2YLVorU57s.png" alt></p><p><img src="https://i.loli.net/2020/01/09/TY6D97KoGECpWdz.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> photoshop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>豆瓣top250</title>
      <link href="/2020/01/09/%E8%B1%86%E7%93%A3top250/"/>
      <url>/2020/01/09/%E8%B1%86%E7%93%A3top250/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">226</span>,<span class="number">25</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start='</span> + str(i) + <span class="string">'&amp;filter='</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    headers = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    response = requests.get(url, headers=headers)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    html = response.text</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    result = re.findall(<span class="string">'class="info".*?title.*?&gt;(.*?)&lt;'</span>,html, re.S)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> results <span class="keyword">in</span> result:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">with</span> open(<span class="string">'result.txt'</span>,<span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">             f.write(json.dumps(results, ensure_ascii=<span class="literal">False</span>) + <span class="string">'\n'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        time.sleep(<span class="number">1</span>)</span></pre></td></tr></table></figure><p>其它的模板通过前面的学习已经知道他们的作用了, 但此刻的 json 却不知道是从哪里冒出来的.</p><p>我们知道，我们获得的 result 是 list 类型, 而列表是不能直接写入文件中的, 那我们只好进行转化, 使列表变得有序化.</p><p>python 提供了一种方法, json 中的 dumps() 方法可以使其序列化, 而dumps()里面有一个参数是 ensure_ascii , 默认是 True ，<br>如果改成 False 编码方式就可以保证输出中文而不是 Unicode 编码.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web_spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web_spider[正则表达式]</title>
      <link href="/2020/01/08/Web-spider-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/01/08/Web-spider-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="常用的匹配规则"><a href="#常用的匹配规则" class="headerlink" title="常用的匹配规则"></a>常用的匹配规则</h4><table><thead><tr><th>模式</th><th align="center">描述</th></tr></thead><tbody><tr><td>\w</td><td align="center">匹配字母、数字及下划线</td></tr><tr><td>\d</td><td align="center">匹配任意数字（0-9）</td></tr><tr><td>\s</td><td align="center">匹配任意空白字符</td></tr><tr><td>\n</td><td align="center">匹配一个换行符</td></tr><tr><td>\t</td><td align="center">匹配一个制表符</td></tr><tr><td>^</td><td align="center">匹配一行字符串的开头</td></tr><tr><td>$</td><td align="center">匹配一行字符串的结尾</td></tr><tr><td>.</td><td align="center">匹配任意字符（除换行符）</td></tr><tr><td>*</td><td align="center">匹配0个或多个表达式</td></tr><tr><td>？</td><td align="center">匹配0个或一个前面的正则表达式定义的片段，非贪婪方式</td></tr></tbody></table><ul><li>match()  :  从头开始匹配</li></ul><p>作为一个常用的匹配方式， 向它传入要匹配的字符串以及正则表达式，就可以检测这个正则表达式是否匹配字符串.它的第一个参数要传入正则表达式, 第二个参数要传入字符串.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">content = <span class="string">'hello cike 567'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">result = re.match(<span class="string">'^hello\s\w&#123;4&#125;\s\d&#123;3&#125;$'</span>, content)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">print(result)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">print(result.group())</span></pre></td></tr></table></figure><p>如果匹配成功就会返回结果，如果失败就会返回 None.</p><p>运行结果如下：</p><p><code>&lt;re.Match object; span=(0, 14), match=&#39;hello cike 567&#39;&gt;</code><br><code>hello cike 567</code></p><p>如果想要匹配目标, 比如 567 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">content = <span class="string">'hello cike 567'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">result = re.match(<span class="string">'^hello\s\w&#123;4&#125;\s(\d+)'</span>, content)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">print(result.group(<span class="number">1</span>))</span></pre></td></tr></table></figure><p>运行结果:</p><p><code>567</code></p><p>这样我们就可以通过一个括号把想要的部分括起来, 然后通过 group(1) 访问第一个括号里面的内容.</p><h4 id="通用匹配"><a href="#通用匹配" class="headerlink" title="通用匹配"></a>通用匹配</h4><p>如果要一个一个的匹配, 我们倒还不如不用正则表达式, 那么有没有一种通用的匹配方法呢？ 当然有了.</p><ul><li>贪婪</li></ul><p>在 python 中， 把 “ .* “ 当作通用的匹配方式（当然，除了换行符外）在最后记得加上一个 $ 结尾符号即可， 不然， 贪婪的 .* 会把你后面所有的字符吃掉 (当然，也是除了换行符外) </p><ul><li>非贪婪</li></ul><p>.*? ： </p><p>相对于想要匹配尽量多字符的 .* ， .*? 却恰恰相反，它匹配的是尽量少的字符</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">content = <span class="string">'hello cike 567'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">result = re.match(<span class="string">'^he.*?(\d+)$'</span>, content)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">print(result.group(<span class="number">1</span>))</span></pre></td></tr></table></figure><p>运行结果如下：</p><p><code>567</code></p><p>猜一下如果我们不加 ？ , 会是什么结果.</p><p><code>7</code></p><p>因为 .* 是匹配尽量多的字符, 所以由于它的贪婪, 只给 \d+ 留下了一个数字 7, 当然这也是因为 \d+ 是匹配一个或多个数字的原因使得可以进行这样的分配.</p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>前面我们说过， 通用符可以包括任意的字符, 但是不能包括换行符， 那么如果想要再包括换行符，就要加上 re.S</p><p>比如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">content = <span class="string">'''hello</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">cike 567</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">result = re.match(<span class="string">'^he.*?(\d+)$'</span>, content, re.S)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">print(result.group(<span class="number">1</span>))</span></pre></td></tr></table></figure><p>运行结果：</p><p><code>567</code></p><p>常见的修饰符如下:</p><table><thead><tr><th>修饰符</th><th align="center">描述</th></tr></thead><tbody><tr><td>re.I</td><td align="center">使匹配对大小写不敏感</td></tr><tr><td>re.L</td><td align="center">使本地化识别匹配</td></tr><tr><td>re.M</td><td align="center">多行匹配</td></tr><tr><td>re.S</td><td align="center">使.匹配包括行在内的所有字符</td></tr><tr><td>re.U</td><td align="center">根据Unicode字符集解析字符</td></tr></tbody></table><hr><p>道理我们都懂，but…</p><p>当我们的字符串里面包含有 “ . “ 又该怎么办呢？</p><p>这时候我们就需要转义.和c语言一样，在需要转义的字符前面加上 \</p><p>比如：</p><p><code>result = &#39;www\.baidu\.com&#39;</code></p><h4 id="search-：-扫描整个字符串，返回第一个匹配成功的结果"><a href="#search-：-扫描整个字符串，返回第一个匹配成功的结果" class="headerlink" title="search()  ： 扫描整个字符串，返回第一个匹配成功的结果"></a>search()  ： 扫描整个字符串，返回第一个匹配成功的结果</h4><p>实例感受一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">html = <span class="string">'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;span class="glyphicon glyphicon-user"&gt;&lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;span class="glyphicon-class"&gt;消息通知(</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;span  style="color: #ed5736; font-weight: bold" id="xxtz" &gt;0&lt;/span&gt;&amp;nbsp;)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;/span&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="string">      '''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">result = re.search(<span class="string">'-class.*?&gt;(.*?)\('</span>, html, re.S)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">print(result.group(<span class="number">1</span>))</span></pre></td></tr></table></figure><p>运行结果如下:</p><p><code>消息通知</code></p><p>没有了繁琐的内容，我们可以直接快速的找到自己想要的内容.</p><p>但是有一个不得不提，search() 方法只能获取第一个符合要求的， 但是如果我们想要获取一组数据, search 方法就显得有些心有余而力不足了.<br>我们就不得不引入 findall()</p><h4 id="findall-搜索整个字符串，-返回匹配正则表达式的所有内容"><a href="#findall-搜索整个字符串，-返回匹配正则表达式的所有内容" class="headerlink" title="findall() : 搜索整个字符串， 返回匹配正则表达式的所有内容."></a>findall() : 搜索整个字符串， 返回匹配正则表达式的所有内容.</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">html = <span class="string">'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;a href="/jsxsd/xsxkjg/xsxkkb" target="kbFrame"&gt;选课课表&lt;/a&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;/li&gt;  </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">              </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;li id="xkjgLi"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;a href="/jsxsd/xsxkjg/comeXkjglb" target="kbFrame"&gt;选课结果查看及退选&lt;/a&gt; </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;/li&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="string">               </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;li id="xkrzLi"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;a href="/jsxsd/xsxkjg/getTkrzList" target="kbFrame"&gt;退课日志查看&lt;/a&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;/li&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;!--   </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;li id="xktkLi"&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;a href="/jsxsd/xsxkjg/comeXkjglb" target="kbFrame"&gt;课程停开列表&lt;/a&gt; </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;/li&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="string">      '''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">result = re.findall(<span class="string">'target.*?&gt;(.*?)&lt;'</span>, html, re.S)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    print(result[i])</span></pre></td></tr></table></figure><p>输出结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">选课课表</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">选课结果查看及退选</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">退课日志查看</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">课程停开列表</span></pre></td></tr></table></figure><ul><li>乱入： 不知到现在你是否和我一样有一个疑问， 那就是为什么在这里用了列表的访问方式 []<br>因为用 type() 方法检查之后发现 result 的类型就是 list 类型的. 而对于之前的 match 和 search方法都是返回一个内容， 故可以用 group()<br>但是 因为 findall() 方法是输出多个内容故不能再用 group 方法.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Web_spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有道翻译</title>
      <link href="/2020/01/07/Web-spider-%5B%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91%5D/"/>
      <url>/2020/01/07/Web-spider-%5B%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91%5D/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">content = input(<span class="string">"请输入待翻译的内容(输入0退出程序):"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> content == <span class="string">"0"</span>: <span class="keyword">break</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">data = &#123;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">data[<span class="string">'i'</span>] = content</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">data[<span class="string">'from'</span>] = <span class="string">'AUTO'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">data[<span class="string">'to'</span>] =  <span class="string">'AUTO'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">data[<span class="string">'smartresult'</span>] = <span class="string">'dict'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">data[<span class="string">'client'</span>] = <span class="string">'fanyideskweb'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">data[<span class="string">'salt'</span>] = <span class="string">'15780286531233'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">data[<span class="string">'sign'</span>] = <span class="string">'fea785927e5dc89ee5d05f9b5d4035b3'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">data[<span class="string">'ts'</span>] = <span class="string">'1578028653123'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">data[<span class="string">'bv'</span>] = <span class="string">'42160534cfa82a6884077598362bbc9d'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">data[<span class="string">'doctype'</span>] = <span class="string">'json'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">data[<span class="string">'version'</span>] = <span class="string">'2.1'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">data[<span class="string">'keyfrom'</span>] = <span class="string">'fanyi.web'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">data[<span class="string">'action'</span>] = <span class="string">'FY_BY_REALTlME'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">'utf-8'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">response = urllib.request.urlopen(url, data) <span class="comment">#新增了data参数.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">html = response.read().decode(<span class="string">'utf-8'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">result = json.loads(html)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">print(result[<span class="string">"translateResult"</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">"tgt"</span>])</span></pre></td></tr></table></figure><p>在 python 中，json结构 和 字典结构的形式很相似,上面的 “html” 类型就是 json （在Data中的 “doctype” 可见）.</p><p>如果直接输出 html (比如输入的是”love”), 结果是:</p><p><code>{&quot;type&quot;:&quot;EN2ZH_CN&quot;,&quot;errorCode&quot;:0,&quot;elapsedTime&quot;:1,&quot;translateResult&quot;:[[{&quot;src&quot;:&quot;love&quot;,&quot;tgt&quot;:&quot;爱&quot;}]]}</code></p><p>python中提供的转换方式是 json.loads() 这样, result 就变成了字典类型, 我们就可以通过访问字典里面的键访问翻译的内容.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web_spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web_spider[解析链接]</title>
      <link href="/2020/01/06/Web-spider-%E8%A7%A3%E6%9E%90%E9%93%BE%E6%8E%A5/"/>
      <url>/2020/01/06/Web-spider-%E8%A7%A3%E6%9E%90%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>urllib 的 parse 模板定义了处理 URL 的标准接口, 例如实现 url 各部分的抽取， 合并， 以及链接的转换.</p><h4 id="urlparse"><a href="#urlparse" class="headerlink" title="urlparse"></a>urlparse</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">result = urlparse(<span class="string">'http://www.baidu.com/index.html'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">print(type(result), <span class="string">'\n'</span>, result)</span></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;class &#39;urllib.parse.ParseResult&#39;&gt; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> ParseResult(scheme&#x3D;&#39;http&#39;, netloc&#x3D;&#39;www.baidu.com&#39;, path&#x3D;&#39;&#x2F;index.html&#39;, params&#x3D;&#39;&#39;, query&#x3D;&#39;&#39;, fragment&#x3D;&#39;&#39;)</span></pre></td></tr></table></figure><p>看以看出， 返回的是一个 ParseResult 类型的对象. 包含了六个部分， scheme, netloc, path, params, fragment.</p><p>scheme : 协议</p><p>netloc : 域名</p><p>path : 访问路径</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web_spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web_spider[异常处理]</title>
      <link href="/2020/01/03/Web-spider-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2020/01/03/Web-spider-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>了解了发送请求的过程之后, 我们不得不产生疑问： 天哪！在网络环境不好的情况下, 那我的爬虫脚本岂不是要终止运行了 ？ 程序很有可能在一些非人为因素情况下因报错而终止运行, 所以异常处理很重要.</p><p>urllib 中的 error 模板定义了 request 模块产生的异常.</p><h4 id="URLErrorr"><a href="#URLErrorr" class="headerlink" title="URLErrorr"></a>URLErrorr</h4><p>URLError 来自于 urllib 的 error 模块, 它有一个属性 reason ，可以返回错误的原因.</p><p>比如说…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> error, request</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    response = request.urlopen(<span class="string">'https://minewelt.cn/index.htm'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    print(e.reason)</span></pre></td></tr></table></figure><p>我们打开了一个不存在的页面, 程序自然会报错, 但我们用 URLError 这个异常， 就会出现</p><p><code>Not Found</code></p><p>我们亲切的称呼它为 404.</p><h4 id="HTTPError"><a href="#HTTPError" class="headerlink" title="HTTPError"></a>HTTPError</h4><p>它是 URLError 的子类, 专门用来处理 HTTP  请求错误. </p><ul><li><p>code ： 返回 HTTP 状态码.</p></li><li><p>reason ： 同 URLError.</p></li><li><p>headers ： 返回请求头.</p></li></ul><p>实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> error, request</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    response = request.urlopen(<span class="string">'https://minewelt.cn/index.htm'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    print(e.reason,<span class="string">'\n'</span>, e.code,<span class="string">'\n'</span>, e.headers)</span></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Not Found </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> 404 </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> Content-Type: text&#x2F;html; charset&#x3D;utf-8</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Server: GitHub.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">ETag: &quot;5cc3539e-247b&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src &#39;none&#39;; style-src &#39;unsafe-inline&#39;; img-src data:; connect-src &#39;self&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">X-Proxy-Cache: MISS</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">X-GitHub-Request-Id: 5B24:5635:1BC6492:1D88265:5E141BCC</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">Content-Length: 9339</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">Accept-Ranges: bytes</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">Date: Tue, 07 Jan 2020 05:58:17 GMT</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">Via: 1.1 varnish</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">Age: 557</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">Connection: close</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">X-Served-By: cache-tyo19943-TYO</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">X-Cache: HIT</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">X-Cache-Hits: 1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">X-Timer: S1578376698.636971,VS0,VE1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">Vary: Accept-Encoding</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">X-Fastly-Request-ID: af139429859815307ec6c7a9822fc56d4967bee0</span></pre></td></tr></table></figure><p>既然 HTTPError 是 URLError 的子类， 所以我们不妨先检查子类， 再检查父类. 这样可以提高效率.</p><pre><code>from urllib import request, errortry:    response = request.urlopen(&apos;https://minewelt.cn/index.htm&apos;)except error.HTTPError as e:    print(e.reason,&apos;\n&apos;, e.code,&apos;\n&apos;, e.headers)except error.URLError as e:    print(e.reason)else:    print(&apos;Request Successfully&apos;)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Web_spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web spider[打开链接]]</title>
      <link href="/2020/01/01/Web-spider-%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/"/>
      <url>/2020/01/01/Web-spider-%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<p>urllib 内置四个模板 : </p><ul><li>request : HTTP 请求模板, 可以用来模拟发送请求.</li><li>error : 异常处理模块, 用以保证程序不会异常中断.</li><li>parse : 工具模板, 提供了很多的 URL 处理方法.(拆分, 解析, 合并等)</li><li>robotparser : 主要识别网站的 robots.txt 文件, 然后判断哪些网站可以爬取.</li></ul><hr><h4 id="urlopen"><a href="#urlopen" class="headerlink" title="urlopen()"></a>urlopen()</h4><p>在python的官方文档中, urlopen() 函数的 API ：</p><p><code>urllib.request.urlopen(url, data=None, [time,]*, cafile=None, capath=None, cadefault=False, context=None)</code></p><p>首先我们看看它的强大之处.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.baidu.com'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">location.replace(location.href.replace(<span class="string">"https://"</span>,<span class="string">"http://"</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&lt;/script&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;/head&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&lt;noscript&gt;&lt;meta http-equiv="refresh" content="0;url=http://www.baidu.com/"&gt;&lt;/noscript&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&lt;/body&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&lt;/html&gt;</span></pre></td></tr></table></figure><p>仅仅两行代码, 便完成了对 pyhton 代码的抓取, 得到了网页的源码之后, 我们可以得到任何想要的信息 : 链接、图片地址、文本信息…</p><ul><li>data</li></ul><p>data 参数是可选的， urlopen 的默认的 data 方式是 GET ，给 data 赋值之后它的请求方式就变成了 POST 形式. </p><p>需要注意的是, 在 python 的官方文档中, 指定 data 这个参数的形式必须是 urlencode() 的形式, 所以我们需要用到 urllib.parse 模板里面的 urllib.parse.urlencode() 方法.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">data = &#123;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">data[<span class="string">'word'</span>] = <span class="string">'hello'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">'utf-8'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/post'</span>, data = data)  <span class="comment">#此处的url是用来测试POST请求的链接</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">print(response.read())</span></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">"args"</span> : &#123;&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="string">"data"</span> : <span class="string">""</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">"files"</span> : &#123;&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">"form"</span> : &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">"word"</span> : <span class="string">"hello"</span>        <span class="comment">#我们传递的参数出现在了 form 中，表明是模拟了表单的提交方式是以 POST 形式传输数据</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="string">"headers"</span> : &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="string">"Accept-Encoding"</span> : <span class="string">"identity"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="string">"Content-Length"</span> : <span class="string">"10"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="string">"Content-Type"</span> : <span class="string">"application/x-www-form-urlencode"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="string">"Host"</span> : <span class="string">"httpbin.org"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="string">"User-Agent"</span> : <span class="string">"Python-urllib/3.8"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="string">"json"</span> : null,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="string">"origin"</span> : <span class="string">"123.124.23.253"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="string">"url"</span> : <span class="string">"http://httpbin.org/post"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><ul><li>timeout</li></ul><p>timeout 参数用于设置超时时间，单位是秒, 如果超过这个设定的时间， 就会抛出异常.</p><ul><li>其他参数</li></ul><p>详情请移步: <a href="https://docs.python.org/3/library/urllib.request.html" target="_blank" rel="noopener">https://docs.python.org/3/library/urllib.request.html</a></p><hr><h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h4><p>对于简单的请求, urlopen 可以胜任, 但是不足以构成完整的请求. 如果要添加 Headers 等信息， 就要更强大的 Request 类.</p><p>实例感受一下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">request = urllib.request.Request(<span class="string">'http://python.org'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">response = urllib.request.urlopen(request)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span></pre></td></tr></table></figure><p>注意, 这里我们依然是用 urlopen 打开， 不同的是， 其参数不再是 url ，而是 Request 对象.</p><ul><li>Request 的参数构造：</li></ul><p><code>urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)</code></p><ul><li><p>headers : 是一个字典, 它就是请求头, 添加请求的最常用方法就是 通过修改 User—Agent 来伪装浏览器 , 默认的 Python-urllib.（直接 copy 源码中的 User-Agent ）</p></li><li><p>origin_req_host : 指的是请求方的 host 名称或者 ip地址.</p></li><li><p>unverifiable : 是用来表示请求是否无法验证, 默认是False. </p></li><li><p>method : 是一个字符串, 指示请求的方法, 比如 GET，POST 和 PUT.</p></li></ul><hr><h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><p>如果我们需要功能更高级 ( 比如Cookies处理， 代理设置 ) 的请求方式, 就要使用 Handler.</p><p><a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler" target="_blank" rel="noopener">https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler</a></p><h3 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h3><p>相对于 urlpoen 的含糊不清， 我更喜欢 requests 的简单直接。它可以指明请求方式（POST还是GET），可以进行代理设置，Cookies 设置，添加 headers .</p><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><ul><li>添加 headers</li></ul><p>现如今，很多网页都禁止爬取，所以有必要添加 headers 来模拟用户访问.</p><p><code>requests.get(url, headers = headers)</code></p><p>具体用法和 urlopen 一样， 这里就不再复述了.</p><ul><li>抓取二进制数据</li></ul><p>其实，图片，音频，视频这些文件都是二进制代码，由于有特殊的保存方式和解码方式所以才会产生不同的结果.所以，如果我们想要获取他们，就要抓取二进制代码.</p><ul><li>代理设置</li></ul><p>对于很多网站, 在你测试的时候请求几次之后，能获取正常内容，一旦开始大规模爬取, 网页就会弹出验证页面. 或者禁止你的 ip 访问权限.<br>这时候我们就要选用不同的代理.</p><p>而与代理设置有关的参数就是 proxies.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://www.baidu.com'</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">proxies  = &#123;<span class="string">'http'</span>:<span class="string">'http://183.207.224.43:80'</span>,<span class="string">'http'</span>:<span class="string">'http://180.97.34.35:80'</span>&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">requests.get(url, proxies=proxies)</span></pre></td></tr></table></figure><p>当然，我们有需要的话，可以同时把 headers 也塞进去.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web_spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的魔法棒</title>
      <link href="/2019/12/31/Python%E7%9A%84%E9%AD%94%E6%B3%95%E6%A3%92/"/>
      <url>/2019/12/31/Python%E7%9A%84%E9%AD%94%E6%B3%95%E6%A3%92/</url>
      
        <content type="html"><![CDATA[<p>还记的第一次见到 “<strong>init</strong>” 的心情吗？实在不知道这个拥有双下横线的到底是什么东西.</p><p>一通百度加谷歌, 发现其实就是 python 中的魔法方法.</p><h4 id="What’s-the-python’s-magic-methods"><a href="#What’s-the-python’s-magic-methods" class="headerlink" title="What’s  the  python’s  magic methods ?"></a>What’s  the  python’s  magic methods ?</h4><p>魔法方法是python的内置方法，几乎每一个魔法方法都有一个对应的内置函数，或者运算符,它是面向对象的一切.</p><h4 id="init"><a href="#init" class="headerlink" title="init"></a><strong>init</strong></h4><p>“<strong>init</strong>“ 是什么呢？其实它就是一个构造器， 当你创建一个类的实例的时候， 调用 “<strong>init</strong>“ 是为了对这个实例进行初始化赋值.就像是类的固有属性.</p><p>比如，定义一个矩形类，需要有实例化的时候长和宽两个参数.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     self.x = x</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     self.y = y</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     <span class="comment">#self.x是类实例化之后的实例对象的一个局部变量, 而 x 则是传入的参数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">getPeri</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">         <span class="keyword">return</span> (self.x + self.y) * <span class="number">2</span></span></pre></td></tr></table></figure><p>上面的程序运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;rect = Rectangle(<span class="number">3</span>, <span class="number">4</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;rect.getPeri()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="number">14</span></span></pre></td></tr></table></figure><p>还需要提出的是，init方法是没有返回值的, 比如说:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, str)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        self.str = str</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> str</span></pre></td></tr></table></figure><p>在 python_sell 中:</p><p><code>&gt;&gt;&gt; words = Test(&quot;我才是熬夜冠军哈哈哈&quot;)</code></p><p><code>TypeError: __init__() should return None, not &#39;str&#39;</code> </p><p>而知道了<strong>init</strong> 之后，我们再去接触其它的魔法方法就不会再云里雾里了.</p><h4 id="str-和-repr"><a href="#str-和-repr" class="headerlink" title="str 和 repr"></a><strong>str</strong> 和 <strong>repr</strong></h4><p>先上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">            self.name = name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> self.name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A(<span class="string">"Tom"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">Tom</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&lt;__main__.A object at <span class="number">0x03B9E628</span>&gt;   <span class="comment">#这次打印出来的是 a 的地址.</span></span></pre></td></tr></table></figure><p>其实, 当使用方法 print 的时候, 默认会调用 str 方法, 从而将其字符串返回. 如果直接敲 a 呢, 那就不会调用 str 方法的, 从而显示出了 str 的地址.</p><p>为了能敲出实例对象就能返回信息, 我们要用 <strong>repr</strong> 方法.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">            self.name = name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> self.name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = B(<span class="string">"Jake"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">Jake</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">Jake</span></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记python生成exe程序</title>
      <link href="/2019/12/29/%E8%AE%B0python%E7%94%9F%E6%88%90exe%E7%A8%8B%E5%BA%8F/"/>
      <url>/2019/12/29/%E8%AE%B0python%E7%94%9F%E6%88%90exe%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>1、安装 PyInstaller</p><p>要说把 python 代码打包成 exe 可执行文件， 那所利用的工具非 PyInstaller 莫属了.</p><p><code>pip install pyinstaller</code></p><p>打开 cmd ，一条命令搞定.</p><p>2、使用 PyInstaller</p><p>在你想要打包的程序(比如test.py)的同目录下， 打开 cmd， 也是一条命令 ：</p><p><code>pyinstaller test.py</code></p><p>然后会看到新增加了两个目录build和dist，dist下面的文件就是可以发布的可执行文件，对于上面的命令你会发现dist目录下面有一堆文件，各种都动态库文件和myscrip可执行文件。有时这样感觉比较麻烦，需要打包dist下面的所有东西才能发布，万一丢掉一个动态库就无法运行了.</p><p>有什么好的解决办法吗？ </p><p>当然有了 ！</p><p><code>pyinstaller -F test.py</code></p><p>这样，会发现dist文件夹下有一个名为 test 的 exe 类型的程序.</p><p>至于其他的文件不想要就删除了吧….</p><p>搞定~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>self到底是什么</title>
      <link href="/2019/12/28/self%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2019/12/28/self%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>最近在学习类和对象的时候，类中定义的一个函数总是有一个参数是self,它并没有被赋值,它到底是干啥的？？？</p><p>在我们尝试搞清楚self之前, 我们应该搞清楚类与对象的概念</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>对象=属性+方法</p><p>对象不一定非要在类中,将对象放在类中只是为了实现批量的 “生产”.</p><p>这样，我们就定义了一个类对象.</p><p>因此, 对象无处不在, 类就是类对象, 函数也是对象…</p><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>正所谓, 物以类聚，人以群分.</p><p>类就是一些具有共同特征的一个组合, 是方法和属性的封装, 是有一定的特有属性（静态的、动态的）.</p><p>举个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span>  <span class="comment">#python中的类名约定以大写字母开头，以示与函数名的区分</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">     <span class="comment">#属性（其实就是一些变量）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     legs = <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     arms = <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     mouth = <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     appearance = [<span class="string">"ugly"</span>, <span class="string">"beautiful"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">     color = [<span class="string">"white"</span>, <span class="string">"black"</span>, <span class="string">"yellow"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">     <span class="comment">#方法（其实就是一个个的函数）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">         print(<span class="string">"人是铁饭是钢,一顿不吃饿得慌!"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">         print(<span class="string">"据说人一直不喝水只能坚持3天..."</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">         print(<span class="string">"睡觉喽o(*￣▽￣*)ブ"</span>)</span></pre></td></tr></table></figure><p>这样，我们就定义了一个名为People的类，这个类有自己特有的的属性和方法： 有两条腿、两个胳膊、一个嘴… 它也具有一些动态的特性: 睡觉、吃饭、喝水…</p><h4 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = People()</span></pre></td></tr></table></figure><p>见证伟大的时刻到了: 我们就创建了一个名为 p 的实例对象 !!! </p><p>当然, 我们也可以不给它命名, 直接用下面的方法也同样创建了一个实例对象， 只不过…我们还没有给它上户口.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; People()</span></pre></td></tr></table></figure><p>实例对象被创建之后, 我们就可以尽情的享用它内部的方法 （函数） 了.</p><p>好了, 有了这些概念, 我们就可以放心大胆的回答 self 的用法了.</p><h5 id="self-是什么？"><a href="#self-是什么？" class="headerlink" title="self 是什么？"></a>self 是什么？</h5><p>经过例子我们大概可以知道 : 类中的方法与普通函数只有一个区别——即它们除了用户所给他设定的函数之外, 还有一个额外的第一个参数, 但是你不需要为这个参数赋值, python 会自动帮其赋值.</p><h5 id="self-是固定的吗？"><a href="#self-是固定的吗？" class="headerlink" title="self 是固定的吗？"></a>self 是固定的吗？</h5><p>虽然这个参数的名字不一定非要是 self , 但是这已经成为了 python 中约定俗成的标准. 对, 就是这样, 不要你觉得, 我只要我觉得.</p><h5 id="我可以不加-self-吗"><a href="#我可以不加-self-吗" class="headerlink" title="我可以不加 self 吗?"></a>我可以不加 self 吗?</h5><p>一般情况下, 当然可以了, 前提是如果你不想看到 TypeError: a() takes 0 positional arguments but 1 was given 的话.</p><p>即使一个方法中没有任何参数, 仍需有 self.</p><p>其实非要说的话, 如果定义和调用的时候不传递类实例就可以…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>    <span class="function"><span class="keyword">def</span> <span class="title">p</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>       print(__class__)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;Test.p()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;</span></span></pre></td></tr></table></figure><p>emmmm，我怎么觉得对象加上self.之后就能在一个类中互通了…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web spider[引子]</title>
      <link href="/2019/12/26/Web-spider/"/>
      <url>/2019/12/26/Web-spider/</url>
      
        <content type="html"><![CDATA[<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>1.发起请求：</p><p>通过HTTP库向目标站点发起请求，即发送一个Request，请求可以包含额外的headers、data等信息，然后等待服务器响应。这个请求的过程就像我们打开浏览器，在浏览器地址栏输入网址：<a href="http://www.baidu.com，然后点击回车。这个过程其实就相当于浏览器作为一个浏览的客户端，向服务器端发送了一次请求。" target="_blank" rel="noopener">www.baidu.com，然后点击回车。这个过程其实就相当于浏览器作为一个浏览的客户端，向服务器端发送了一次请求。</a></p><p>2.获取响应内容：</p><p>如果服务器能正常响应，我们会得到一个Response，Response的内容便是所要获取的内容，类型可能有HTML、Json字符串，二进制数据(图片，视频等）等类型。这个过程就是服务器接收客户端的请求，进过解析发送给浏览器的网页HTML文件。</p><p>3.解析内容：</p><p>得到的内容可能是HTML，可以使用正则表达式，网页解析库进行解析。也可能是Json，可以直接转为Json对象解析。可能是二进制数据，可以做保存或者进一步处理。这一步相当于浏览器把服务器端的文件获取到本地，再进行解释并且展现出来。</p><p>4.保存数据：</p><p>保存的方式可以是把数据存为文本，也可以把数据保存到数据库，或者保存为特定的jpg，mp4 等格式的文件。这就相当于我们在浏览网页时，下载了网页上的图片或者视频。</p><p>互联网就是一个蜘蛛网，每一个结点都是一个域名，编写一个蜘蛛，爬来爬去，爬取有用的内容.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web_spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python杂记</title>
      <link href="/2019/12/19/python%E6%9D%82%E8%AE%B0/"/>
      <url>/2019/12/19/python%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>最近开始接触 python, 越学习越发现它的强大和简洁.也越深刻的体会到为什么别人说 “人生苦短, 我学python”. python 是一门很强大的语言,希望能够在接下来的时间里, 能够找到我来打开这个世界的方式.</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="四个内置数据结构：列表、元组、字典、集合（80-）"><a href="#四个内置数据结构：列表、元组、字典、集合（80-）" class="headerlink" title="四个内置数据结构：列表、元组、字典、集合（80%）"></a>四个内置数据结构：列表、元组、字典、集合（80%）</h4><h4 id="1、列表-list-：有序的可变的对象集合"><a href="#1、列表-list-：有序的可变的对象集合" class="headerlink" title="1、列表(list)：有序的可变的对象集合"></a>1、列表(list)：有序的可变的对象集合</h4><p>列表是可变的，可以把列表类似于数组的概念，不同的是，python中的列表是动态的，会根据你的需要来动态的收缩和扩展。</p><p>另外，列表是异构的，即不需要声明储存对象的类型，甚至可以在一个列表中混合不同类型的对象。</p><table><thead><tr><th>对象</th><th align="center">索引值</th></tr></thead><tbody><tr><td>对象2</td><td align="center">2</td></tr><tr><td>对象1</td><td align="center">1</td></tr><tr><td>对象0</td><td align="center">0</td></tr></tbody></table><p>操作应用：</p><table><thead><tr><th>表达式</th><th align="center">结果说明</th></tr></thead><tbody><tr><td>lst * n</td><td align="center">把lst列表重复n次</td></tr><tr><td>lst[n1:n2]</td><td align="center">将索引值n1，n2对应的内容取出，组成另一个列表</td></tr><tr><td>del lst[n1:n2]</td><td align="center">删除索引值n1到n2之间的内容</td></tr><tr><td>lst[n1:n2] = n</td><td align="center">把n1到n2之间的元素设置为n</td></tr><tr><td>lst.append(x)</td><td align="center">将 x 视为一个元素，附加到列表末尾</td></tr><tr><td>lst.extend(x)</td><td align="center">将 x 中的所有元素附加到列表后面</td></tr><tr><td>lst.sort()</td><td align="center">将列表加以排序</td></tr><tr><td>lst.remove(x)</td><td align="center">删除列表中第一个出现的x</td></tr></tbody></table><p>下面展示的是 append 和 extend 的区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;ext = [<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lst.append(ext)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lst</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lst.extend(ext)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lst</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]</span></pre></td></tr></table></figure><h4 id="2、元组-tuple-：有序的不可变的对象集合"><a href="#2、元组-tuple-：有序的不可变的对象集合" class="headerlink" title="2、元组(tuple)：有序的不可变的对象集合"></a>2、元组(tuple)：有序的不可变的对象集合</h4><p>因为元组的不可变特性，通常把元组想象成一个常量列表。</p><p>元组和列表很类似，不同的是元组不可变，这意味着，一旦元组被创建就不能被修改，不然会出现久违的 error</p><h4 id="3、字典-dict-：无序的键-值对集合"><a href="#3、字典-dict-：无序的键-值对集合" class="headerlink" title="3、字典(dict)：无序的键/值对集合"></a>3、字典(dict)：无序的键/值对集合</h4><p>字典是无序且可变的，可以把字典想象成一个两列多行的数据结构。</p><p>注意：因为字典是无序的，所以你不要指望编译器会按照你输入的顺序来依次输出它们</p><p>同样的，字典也是可以根据你的需求来动态的收缩或扩展。</p><table><thead><tr><th>键</th><th align="center">对象</th></tr></thead><tbody><tr><td>键#2</td><td align="center">对象2</td></tr><tr><td>键#1</td><td align="center">对象1</td></tr><tr><td>键#3</td><td align="center">对象3</td></tr></tbody></table><h4 id="4、集合-set-：无序的唯一对象的集合"><a href="#4、集合-set-：无序的唯一对象的集合" class="headerlink" title="4、集合(set)：无序的唯一对象的集合"></a>4、集合(set)：无序的唯一对象的集合</h4><p>集合像字典一样没有顺序，它的亮点在于它内部的对象都是唯一的，不允许存在重复的情况。</p><p>如果单纯用一对 {} 来给变量赋值，变量的类型会被认定为 dict，如果{}里面只有值，而没有键会被认为set</p><h4 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h4><h4 id="1-、if-elif-else"><a href="#1-、if-elif-else" class="headerlink" title="1 、if \ elif \ else"></a>1 、if \ elif \ else</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  x == A:                     <span class="comment">#条件一</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    do something <span class="keyword">for</span> A</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> x == B:                    <span class="comment">#条件二</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    do something <span class="keyword">for</span> B</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>:                           <span class="comment">#条件三</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    do something <span class="keyword">for</span> C</span></pre></td></tr></table></figure><p>注意：if、elif、else 的后面一定要加  :</p><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><p>在python中，对于已经知道循环次数的循环体或者至少知道预期对象，用 for ，而对于不知道循环次数的循环适合用while.</p><h5 id="1、for循环"><a href="#1、for循环" class="headerlink" title="1、for循环"></a>1、for循环</h5><p>形式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="string">"变量"</span> <span class="keyword">in</span>  <span class="string">"遍历（循环）对象"</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    表达式</span></pre></td></tr></table></figure><p>比如：依次打印一个列表的内容:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> list1:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   print(x)</span></pre></td></tr></table></figure><h5 id="附：range"><a href="#附：range" class="headerlink" title="附：range()"></a>附：range()</h5><p>提到 for 循环, 我就不得不补充一个知识点, 那就是与 for 密不可分的 range()。</p><p><code>range(start, stop, step)</code></p><p>看了它的 API 已经一目了然了, 首位是它循环开始的数, 第二位是它循环结束的数字 （ 注意， 并不包括这个数字 ） , 第三位是它每一次走的步数.</p><p>比如<code>range(1,101,10)</code> 就是从 1 开始到 100 结束 , 且每一步的步长是 10.</p><p>有时候为了方便就只写一个数字 <code>range(10)</code></p><p>这个的意思就是, 默认从 0 开始， 到 9 结束, 步长默认为 1.</p><h5 id="2、while循环"><a href="#2、while循环" class="headerlink" title="2、while循环"></a>2、while循环</h5><p>形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="string">"条件"</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">     <span class="string">"循环体"</span></span></pre></td></tr></table></figure><p>比如，模仿掷色子。因为在掷色子之前我们并不知道要循环几次才能得到我们想要的数字，所以要用while循环.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入random模板</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">x = random.randint(<span class="number">1</span>, <span class="number">6</span>)  <span class="comment">#先产生一个1—6的随机数，如果不是 5，就执行下面的循环</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">print(x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#打印产生的随机数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> x != <span class="number">5</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      x = random.randint(<span class="number">1</span>,<span class="number">6</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      print(x)</span></pre></td></tr></table></figure><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><p>break : 用于提前结束循环体</p><p>利用break，可以改写上面的掷色子小程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入random模板：调用randint函数产生随机数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     x = random.randint(<span class="number">1</span>,<span class="number">6</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     print(x)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">if</span> x == <span class="number">5</span>: <span class="keyword">break</span></span></pre></td></tr></table></figure><p>continue : 用于跳过本次循环，再从下一次循环开始。即只要遇到continue，立即放弃本次循环，回到 for/while .</p><h4 id="enmuerate"><a href="#enmuerate" class="headerlink" title="enmuerate()"></a>enmuerate()</h4><p>在for循环中，如果需要在循环中获取当前的索引值，可以使用enmuerate()函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'梦泪'</span>,<span class="string">'奥特曼'</span>,<span class="string">'孙悟空'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, name <span class="keyword">in</span> enmuerate(names):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    print(<span class="string">"No.&#123;&#125;:&#123;&#125;"</span>.format(i, name))</span></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">No<span class="number">.0</span>:梦泪</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">No<span class="number">.1</span>:奥特曼</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">No<span class="number">.2</span>:孙悟空</span></pre></td></tr></table></figure><h4 id="format"><a href="#format" class="headerlink" title="format"></a>format</h4><p>py2.6之后新增的函数 : str.format(). 通过 {} 代替 %</p><p>str.format()函数理论上可以接收无限个参数，而且位置也可以不按顺序.</p><p>比如 :</p><p>（1）不为参数设置指定位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">"&#123;&#125; &#123;&#125;"</span>.format(<span class="string">"hello"</span>, <span class="string">"lihao"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">'hello lihao'</span></span></pre></td></tr></table></figure><p>（2）为参数设置指定位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">"&#123;1&#125; &#123;0&#125;"</span>.format(<span class="string">"hello"</span>. <span class="string">"lihao"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">'lihao hello'</span></span></pre></td></tr></table></figure><h4 id="try-except-例外处理"><a href="#try-except-例外处理" class="headerlink" title="try/except 例外处理"></a>try/except 例外处理</h4><p>顾名思义,先 try（尝试） 一下，再用 except 捕捉出现例外的情况.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        int(input(<span class="string">"what's your age?"</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">except</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        print(<span class="string">"please enter a number!"</span>)</span></pre></td></tr></table></figure><p>为什么要多花几行代码呢？ 目的就是防止用户输入非数字的情况.</p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>python有一种针对处理有序数据的运算器，即迭代器.</p><p>1、 map 函数的用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">map(执行的函数, 容器变量)</span></pre></td></tr></table></figure><p>下面通过一个例子介绍用法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(x)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> fruits[x]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#定义一个函数,通过索引值返回相应的水果</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">choices = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">result = map(pick, choices)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> choice <span class="keyword">in</span> result:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    print(choice)</span></pre></td></tr></table></figure><p>程序的运行结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">banana</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">orange</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">apple</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">apple</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">orange</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">banana</span></pre></td></tr></table></figure><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><h5 id="文件的读取与写入"><a href="#文件的读取与写入" class="headerlink" title="文件的读取与写入"></a>文件的读取与写入</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"文件名"</span>, <span class="string">"文件处理方式"</span>)</span></pre></td></tr></table></figure><table><thead><tr><th>操作</th><th align="center">功能</th></tr></thead><tbody><tr><td>r</td><td align="center">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>w</td><td align="center">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件</td></tr><tr><td>a</td><td align="center">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入</td></tr></tbody></table><p>一般情况下，读取文件的方法有三种 : read(), readline(), readlines().  </p><p>从字面意思上来看，read()是一口气读完, readline()像是一下读一行</p><h5 id="文件与目录的操作"><a href="#文件与目录的操作" class="headerlink" title="文件与目录的操作"></a>文件与目录的操作</h5>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言小程序</title>
      <link href="/2019/12/12/C%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2019/12/12/C%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="#jump1">汉诺塔</a></p><p><a href="#jump2">lihao</a></p><hr><p><span id="jump1">汉诺塔</span> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">0</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">将 n 个盘子从 A 移到 C 可以分解为三个步骤：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">（1）将 A 上的 n-1 个盘子借助C移动到 B 上；</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">（2）把 A 上的剩下的一个盘子移动到 C 上；</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">（3）把 n-1 个盘子从 B 借助 A 移动到 C 上。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">*/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> one, <span class="keyword">char</span> two, <span class="keyword">char</span> three)</span></span>;      <span class="comment">//声明 hanoi 函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> m;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"input the number of diskes:"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"The step to move %d diskes:\n"</span>, m);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    hanoi(m, <span class="string">'A'</span> , <span class="string">'B'</span>, <span class="string">'C'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> one, <span class="keyword">char</span> two, <span class="keyword">char</span> three)</span>         <span class="comment">//定义 hanoi 函数，其作用是将 n 个盘子从 one 借助 two 移动到 three 的过程</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> x, <span class="keyword">char</span> y)</span></span>;                      <span class="comment">//声明 move 函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      <span class="built_in">move</span>(one, three);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">           hanoi(n<span class="number">-1</span>, one, three, two);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">           <span class="built_in">move</span>(one, three);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">           hanoi(n<span class="number">-1</span>, two, one, three);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">void move(char x, char y)  定义 move 函数，其作用是表示 x 到 y 的过程</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c --&gt; %c\n"</span>,x, y);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><span id="jump2">lihao</span> </p>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记</title>
      <link href="/2019/12/05/C/"/>
      <url>/2019/12/05/C/</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h4 id="为什么要使用函数"><a href="#为什么要使用函数" class="headerlink" title="为什么要使用函数"></a>为什么要使用函数</h4><p>函数是什么呢？除了编译软件自带的函数外，用户是否可以自己定义一个函数并调用它呢？如果可以的话，这样将会使代码更加简洁明朗。</p><h4 id="一、声明"><a href="#一、声明" class="headerlink" title="一、声明"></a>一、声明</h4><p>在定义一个函数之前我们要赋予它一个函数名，而所谓函数名其实就是给一个某种功能起一个名字。</p><p>用户要定义的函数类型有 void(无类型，即没有返回值)、int（返回整数值）、float、double、char（返回字符）……</p><h4 id="二、定义"><a href="#二、定义" class="headerlink" title="二、定义"></a>二、定义</h4><p>1、定义无参函数</p><pre><code>类型名   函数名(){    函数体}</code></pre><p>2、定义有参函数</p><pre><code>类型名   函数名(类型+变量){    函数体}</code></pre><p>3、定义空函数</p><pre><code>类型名   函数名() { }   </code></pre><h4 id="三、调用函数"><a href="#三、调用函数" class="headerlink" title="三、调用函数"></a>三、调用函数</h4><p>1、调用函数之前需要在主函数的第一个语句中声明一下函数，因为编译是从main函数开始编译，当编译到用户定义的函数，如果之前没有对函数进行声明，就会出错。</p><p>2、<font color="#FF0000">函数的声明语句是一个语句，需要用 <strong>;</strong> 结尾</font></p><p>3、在调用过程中，系统会把实参的值传递给形参，而函数的返回值是由 return 语句获得的。<font color="red">函数的类型决定返回值的类型</font> 在未出现函数调用的时候，形参并不占用内存单元，发生调用的时候才会临时分配内存单元。<font color="red">调用结束后，形参单元被释放，实参单元仍保留原值。</font></p><p>4、例：</p><pre><code>//先定义函数还是先编写主函数没有什么差别，但本人倾向于先编写主函数#include&lt;stdio.h&gt;int main(){    int max(int x,int y);                      //对max函数声明 “;”不要忘    int a, b, c;    printf(&quot;please input two numbers:&quot;);    sacnf(&quot;%d %d&quot;,&amp;a,&amp;b);    c = max(a,b);                        //调用max函数    printf(&quot;max is %d&quot;,c);    return 0;}int max(int x,int y)         //定义max函数，其功能是求两个数中的最大值{    int z;    z = x &gt; y ? x : y;    return z;}</code></pre><h4 id="四、函数的嵌套"><a href="#四、函数的嵌套" class="headerlink" title="四、函数的嵌套"></a>四、函数的嵌套</h4><p>1、定义：直接或间接的调用函数本身，称为函数的递归调用。</p><p>2、规则：程序中不允许无终止的递归调用，必须加条件限制（if、 while、 for…… ）</p><p>3、特点：从一个已知的事实出发，按照一定规律推出下一个事实，再从这个新的已知事实出发，再向下一个新的事实。</p><p>3、例:用递归法求 n!</p><pre><code>/*   n 的阶乘就是从一，一直乘到 n; 当 n = 1, n! = 1;当 n &gt; 1, n! = n * (n - 1)!下面开始设计程序：*/#include&lt;stdio.h&gt;int main(){    int fac(int n);                //对fac函数声明    int n, y;    printf(&quot;input one number:&quot;);    scanf(&quot;%d&quot;,&amp;n);    y = fac(n);                          //调用fac函数，其作用是求一个数的阶乘    printf(&quot;%d! = %d\n&quot;,n, y);    return 0;}int fac(int n)                   //定义fac函数{    int f;    if(n &lt; 0)       printf(&quot;n &lt; 0, error&quot;);    else if(n == 0 || n == 1)       f = 1;    else f = fac(n - 1) * n;    return f;}</code></pre><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h4 id="一、数组和指针"><a href="#一、数组和指针" class="headerlink" title="一、数组和指针"></a>一、数组和指针</h4><p>*：取值操作符；</p><p>&amp;：取地址操作符；</p><p>操作符* 和操作符 &amp; 的优先级一样, 但是当* 和&amp;同时存在时, 原则是自右向左:<em>&amp;a = a; 首先运算 &amp;a 得到 a 的地址，然后进行</em>a 运算，得到变量a；&amp;<em>a = a的地址;</em>a 得到 a 的值,&amp;a 得到 a 的地址值。</p><p><code>a[i] = *(a + i);</code></p><p>数组和指针不一样，但是有相似的地方。<br>数组里面的每一个元素都有相应的地址；指针可以指向变量，也可以指向数组元素（类型要一致）。（数组元素的指针其实就是数组元素的地址）</p><p><font color="red">注意：</font>数组名a（一维数组和多维数组都是如此），在编译的时候会编译成第一个元素的地址。<br>初值：p = a  相当于 p = &amp;a[0]</p><p>p++ 中不是p的地址加一，而是p加一个单元。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wonderful moment</title>
      <link href="/2019/11/30/filename/"/>
      <url>/2019/11/30/filename/</url>
      
        <content type="html"><![CDATA[<p>2019年11月25日中午，刚考完线代，下着小雨，我踏上了开往淮北的列车。</p><p>这是我们冷战结束的第一天，心里总觉得有些愧疚。就这样，我秘密的买好了票，想要给她一个惊喜。我事先骗她到操场走走，然后我们在操场“偶遇”。果然，这傻不啦叽的女孩，第一反应居然是发型凌乱。我们抱了许久，仔细想想好像很久都没有这样了，仿佛能听到她简单纯粹的激动和开心，那一刻，失望和不满荡然无存。这是异地恋的无奈……我们一起度过了美好的两天，等她下课，一起吃食堂，陪她打卡。我想尽量在属于她的世界里尽量留下我来过的痕迹，就当是我走后的温存吧。</p><p>亲爱的，下次见。</p><p><img src="https://i.loli.net/2019/12/08/2Q1zaJYvNUf4iK9.jpg" alt="11.26日晚于天桥下"></p>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2019/11/29/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/29/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>历时两天，我的博客网站终于搭建完成，对于一个小白来说，这的确有些不容易，不过好在成功了。其实之前是没有这个想法的，但是最近有些朋友弄了，我当然也要玩玩。虽然现在我才19岁，但是十九年里发生的事我很多都不记得，我有时想，如果那些痕迹、那些有价值的事物都被忘记的话，那不仅仅是一个人，而是和他关联的一部分就自然而然地消失了啊。希望我能坚持写下去，记录生活的沙子、拾取成长的贝壳。</p>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
