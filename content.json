{"meta":{"title":"Lihao","subtitle":null,"description":null,"author":"Mr. L","url":"https://github.com/MineWelt/MineWelt.github.io.git","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-10-11T09:07:07.278Z","updated":"2019-11-25T17:39:56.000Z","comments":true,"path":"404.html","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/404.html","excerpt":"","text":"404 Not Found **很抱歉，您访问的页面不存在** 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2020-10-31T05:10:51.117Z","updated":"2020-01-07T06:06:22.772Z","comments":true,"path":"about/index.html","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/about/index.html","excerpt":"","text":"本人普通大学生一名…. 专业通信工程 联系方式QQ : 1069460308 Github : MineWelt"},{"title":"","date":"2020-10-31T05:10:56.430Z","updated":"2019-11-25T17:39:56.000Z","comments":true,"path":"projects/index.html","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/projects/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-10-31T05:10:51.880Z","updated":"2019-11-25T17:39:56.000Z","comments":true,"path":"friends/index.html","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/friends/index.html","excerpt":"","text":"各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～ 名称： xaoxuu’s blog头像： https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg网址： https://xaoxuu.com/blog/标签： iOS"},{"title":"所有标签","date":"2020-06-17T14:17:32.558Z","updated":"2019-11-25T17:39:56.000Z","comments":true,"path":"blog/tags/index.html","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2020-06-17T14:17:32.558Z","updated":"2019-11-25T17:39:56.000Z","comments":true,"path":"blog/categories/index.html","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"前端三件套","slug":"三件套","date":"2020-10-30T16:00:00.000Z","updated":"2020-10-31T07:00:05.955Z","comments":true,"path":"三件套/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/%E4%B8%89%E4%BB%B6%E5%A5%97/","excerpt":"","text":"Web学习路线：HTML5——CSS3——Javascript 结构写到HTML文件中，样式写到CSS中，行为写到JavaScript中 HTML——身体简介首先：HTML语言只是一套“标签”而已，它可以加入图片、声音、多媒体等内容，还可以从一个文件跳转到另一个文件，与各主机的文件连接。 常用浏览器 浏览器 内核 备注 IE Trident IE、百度、360 Firefox Gecko 火狐浏览器 Safari Webkit 苹果浏览器 Chrome/Opera Blink WebKit的分支 HTML骨架 1&lt;html&gt;//文档的根标签2 &lt;head&gt;3 &lt;title&gt;&lt;/title&gt;//文档的标题4 &lt;/head&gt;//文档的头部5 &lt;body&gt;&lt;/body&gt;//文档的主体6&lt;/html&gt; 基础语法1.1标题标签1&lt;h1&gt;一级标题&lt;/h1&gt;2&lt;h2&gt;二级标题&lt;/h1&gt;3&lt;h3&gt;三级标题&lt;/h1&gt;4&lt;h4&gt;四级标题&lt;/h1&gt;5&lt;h5&gt;五级标题&lt;/h1&gt;6&lt;h6&gt;六级标题&lt;/h1&gt; 1.2段落标签和换行标签1&lt;p&gt;段落标签&lt;/p&gt;//会根据窗口大小自动换行且段落之间会保有空隙2&lt;br/&gt;//单标签换行标签，强制换行 1.3文本格式化标签1加粗：&lt;strong&gt;&lt;/strong&gt;或者&lt;b&gt;&lt;/b&gt;2倾斜：&lt;em&gt;&lt;/em&gt;或者&lt;i&gt;&lt;/i&gt;3删除线：&lt;del&gt;&lt;/del&gt;或者&lt;s&gt;&lt;/s&gt;4下划线：&lt;ins&gt;&lt;/ins&gt;或者&lt;u&gt;&lt;/u&gt; 1.4div和spandiv：独占一行，可以看成一个大盒子，在里面装填内容，比如在这个首页中，每一个框都可以看成是一个div盒子 span：一行可以写多个，可以看成一个小盒子 1.5图像标签和路径1&lt;img src = \"图像路径\" alt = \"替换文本(图片显示不出来的时候用这里的文字替换)\" title = \"光标指向图片的时候现实的辅助文字\"/&gt; 1.6超链接路径1&lt;a href = \"跳转目标\" target = \"打开的方式(_self为默认值，_blank是在新窗口打开)\"&gt;这里是点击的对象&lt;/a&gt; 1.7特殊字符 特殊字符 描述 字符代码 &amp;lt 小于号 &lt; &amp;gt 大于号 &gt; &amp;amp 和号 &amp; &amp;reg 注册 ® &amp;trade 商标 ™ &amp;nbsp 空白符 1.8表格标签1&lt;table&gt;2 &lt;tr&gt;//表格中的行3 &lt;th&gt;单元格里面的文字&lt;/th&gt;//这个是表头单元格4 &lt;/tr&gt;5 &lt;tr&gt;6 &lt;td&gt;表格内容&lt;/td&gt;//表格中的单元格7 &lt;/tr&gt;8&lt;/table&gt; 表格标签具有的属性： 属性名 属性值 描述 align left、center、right 对齐方式 border 边框的像素大小(正数) 规定表格是否有边框 cellpadding 像素值 单元边沿与内容之间的留白 cellspacing 像素值 单元格之间的空白 width 像素值或百分比 表格的宽度 表格的结构标签： 1&lt;table&gt;2 &lt;thead&gt;//头部区域3 &lt;tr&gt;//表格中的行4 &lt;th&gt;单元格里面的文字&lt;/th&gt;//这个是表头单元格5 &lt;/tr&gt;6 &lt;/thead&gt;7 &lt;tbody&gt;//内容区域8 &lt;tr&gt;9 &lt;td&gt;表格内容&lt;/td&gt;//表格中的单元格10 &lt;/tr&gt;11 &lt;/tbody&gt; 12&lt;/table&gt; 合并单元格： 跨行合并：rowspan = “合并单元格的个数” 跨列合并：colspan = “合并单元格的个数” demo_个人简历比如写一个个人简历： 1&lt;table border=\"1px\" cellspacing=\"0px\"&gt;2 &lt;tr height='40px'&gt;3 &lt;td colspan=\"7\" align=\"center\"&gt;个人简历&lt;/td&gt;&lt;!--colspan='x'代表这一个单元格占据x个单元格的宽度--&gt;4 &lt;/tr&gt;5 &lt;tr height='40px'&gt;&lt;!--设置单元格的高度--&gt;6 &lt;td width=\"100px\" align=\"center\"&gt;姓名&lt;/td&gt;7 &lt;td width=\"100px\" align=\"center\"&gt;&lt;/td&gt;8 &lt;td width=\"100px\" align=\"center\"&gt;性别&lt;/td&gt;9 &lt;td width=\"100px\" align=\"center\"&gt;&lt;/td&gt;10 &lt;td width=\"100px\" align=\"center\"&gt;年龄&lt;/td&gt;11 &lt;td width=\"100px\" align=\"center\"&gt;&lt;/td&gt;12 &lt;td rowspan=\"4\" align=\"center\"&gt;照片&lt;/td&gt;&lt;!--同理，代表一列占多少个单元格--&gt;13 &lt;/tr&gt;14 &lt;tr height='40px'&gt;15 &lt;td width=\"100px\" align=\"center\"&gt;学历&lt;/td&gt;16 &lt;td width=\"100px\" align=\"center\"&gt;&lt;/td&gt;17 &lt;td width=\"100px\" align=\"center\"&gt;籍贯&lt;/td&gt;18 &lt;td colspan=\"3\" align=\"center\"&gt;&lt;/td&gt;19 &lt;/tr&gt;20 &lt;tr height='40px'&gt;21 &lt;td width=\"100px\" align=\"center\"&gt;电话&lt;/td&gt;22 &lt;td width=\"100px\" align=\"center\"&gt;&lt;/td&gt;23 &lt;td width=\"100px\" align=\"center\"&gt;政治面貌&lt;/td&gt;24 &lt;td colspan=\"3\" align=\"center\"&gt;&lt;/td&gt;25 &lt;/tr&gt;26 &lt;tr height='40px'&gt;27 &lt;td width=\"100px\" align=\"center\"&gt;毕业院校&lt;/td&gt;28 &lt;td colspan=\"5\" align=\"center\"&gt;&lt;/td&gt;29 &lt;/tr&gt;30 &lt;tr height='40px'&gt;31 &lt;td width=\"100px\" align=\"center\"&gt;求职意向&lt;/td&gt;32 &lt;td colspan=\"6\" align=\"center\"&gt;&lt;/td&gt;33 &lt;/tr&gt;34&lt;/table&gt; 1.9列表标签表格是用来显示数据，而列表是用来布局的.可使布局整齐有序 无序列表 应用： 1&lt;ul&gt;//无序列表项目（ul里面只能嵌套li标签）2 &lt;li&gt;&lt;/li&gt;//列表项（而li标签相当于一个容器，可以容纳所有元素）3 &lt;li&gt;&lt;/li&gt;4&lt;/ul&gt; 有序列表 1&lt;ol&gt;2 &lt;li&gt;&lt;/li&gt;3 &lt;li&gt;&lt;/li&gt;4&lt;/ol&gt; 自定义列表 应用： 比如写上面第一列的列表，如下： 1&lt;dl&gt;2 &lt;dt&gt;帮助中心&lt;/dt&gt;3 &lt;dd&gt;账户管理&lt;/dd&gt;4 &lt;dd&gt;购物指南&lt;/dd&gt;5 &lt;dd&gt;订单操作&lt;/dd&gt;6&lt;/dl&gt; 1.10表单信息应用场景： 主要目的就是为了收集用户信息，由三部分组成：表单域、表单控件、提示信息 1&lt;form action=\"url地址（用于指定接受并处理表单数据的服务器程序的url地址）\" method=\"提交方式（get/post）\" name=\"表单域名称\"&gt;2 &lt;input type=\"属性值(button:按钮;text:文本框;password:密码字段，输入的字符可以被掩码;submit:提交按钮;radio:定义单选按钮;checkbox:多选框;value:表单框里面的提示信息)\"&gt;3&lt;/form&gt; 上面的属性中存在一个问题，就是当需要单选框的时候（比如性别的男和女只能选择一个）却能够都选上。这时候就应该设置相同的name值,比如: 1性别：男&lt;input type=\"radio\" name=\"sex\"&gt;女&lt;input type=\"radio\" name=\"sex\"&gt; 单选框和复选框如果想要处于默认选中的状态，则应该令checked = “checked” 1&lt;input type=\"\" name=\"\" value=\"\" checked = \"checked\"/&gt; 属性值 描述 button 定义可点击按钮 checkbox 定义复选框 file 定义输入字段和“浏览”按钮，供文件上传 image 定义图像形式的提交按钮 password 定义密码字段，该字段的字符会被掩码 radio 定义单选按钮 reset 定义重置按钮，会清空表单中的所有数据 submit 定义提交按钮，会把数据提交到服务器 text 定义单行的输入字段，默认宽度20 扩展：label label标签用于绑定一个表单元素，当点击标签内的文本的时候，浏览器会自动将焦点(光标)转到或者选择对应的表单元素上，用来增加用户体验。 1&lt;input type=\"radio\" name=\"sex\" id=\"man\"/&gt;&lt;label for=\"man\"&gt;男&lt;/label&gt; 扩展：下拉菜单select 1地区:2&lt;select&gt;3 &lt;option&gt;北京&lt;/option&gt;4 &lt;option&gt;上海&lt;/option&gt;5 &lt;option&gt;广东&lt;/option&gt;6&lt;/select&gt; 扩展：文本域 文本输入框text可输入的最大长度是20个，但是当我们需要输入很多文字的时候就需要文本域了。 1留言板:2&lt;textarea&gt;&lt;/textarea&gt; 学了上面的知识，我们可以写一个demo，不妨先自己尝试着写一下: demo_注册界面 1&lt;h3&gt;青春不常在，抓紧谈恋爱&lt;/h3&gt;2 &lt;table width=\"500px\"&gt;3 &lt;tr&gt;4 &lt;td&gt;性别:&lt;/td&gt;5 &lt;td&gt;6 &lt;input type=\"radio\" name=\"sex\" id=\"nan\"&gt;&lt;label for=\"nan\"&gt;男&lt;/label&gt;7 &lt;input type=\"radio\" name=\"sex\" id=\"girl\"&gt;&lt;label for=\"girl\"&gt;女&lt;/label&gt;8 &lt;/td&gt;9 &lt;/tr&gt;10 &lt;tr&gt;11 &lt;td&gt;生日:&lt;/td&gt;12 &lt;td&gt;13 &lt;select&gt;14 &lt;option&gt;-选择年份-&lt;/option&gt;15 &lt;option&gt;1999&lt;/option&gt;16 &lt;option&gt;2000&lt;/option&gt;17 &lt;/select&gt;18 &lt;select&gt;19 &lt;option&gt;-选择月份-&lt;/option&gt;20 &lt;option&gt;01&lt;/option&gt;21 &lt;option&gt;02&lt;/option&gt;22 &lt;/select&gt;23 &lt;select&gt;24 &lt;option&gt;-选择日期-&lt;/option&gt;25 &lt;option&gt;01&lt;/option&gt;26 &lt;option&gt;02&lt;/option&gt;27 &lt;/select&gt;28 &lt;/td&gt;29 &lt;/tr&gt;30 &lt;tr&gt;31 &lt;td&gt;所在地区:&lt;/td&gt;32 &lt;td&gt;&lt;input type=\"text\"&gt;&lt;/td&gt;33 &lt;/tr&gt;34 &lt;tr&gt;35 &lt;td&gt;婚姻状况:&lt;/td&gt;36 &lt;td&gt;37 &lt;input type=\"radio\" name=\"marry\" id=\"no\"&gt;&lt;label for=\"no\"&gt;未婚&lt;/label&gt;38 &lt;input type=\"radio\" name=\"marry\" id=\"yes\"&gt;&lt;label for=\"yes\"&gt;已婚&lt;/label&gt;39 &lt;input type=\"radio\" name=\"marry\" id=\"married\"&gt;&lt;label for=\"married\"&gt;离婚&lt;/label&gt;40 &lt;/td&gt;41 &lt;/tr&gt;42 &lt;tr&gt;43 &lt;td&gt;喜欢类型:&lt;/td&gt;44 &lt;td&gt;45 &lt;input type=\"checkbox\" name=\"one\" id=\"1\"&gt;&lt;label for=\"1\"&gt;可爱&lt;/label&gt;46 &lt;input type=\"checkbox\" name=\"two\" id=\"2\"&gt;&lt;label for=\"2\"&gt;御姐&lt;/label&gt;47 &lt;input type=\"checkbox\" name=\"three\" id=\"3\"&gt;&lt;label for=\"3\"&gt;妩媚&lt;/label&gt;48 &lt;/td&gt;49 &lt;/tr&gt;50 &lt;tr&gt;51 &lt;td&gt;自我介绍:&lt;/td&gt;52 &lt;td&gt;53 &lt;textarea&gt;&lt;/textarea&gt;54 &lt;/td&gt;55 &lt;/tr&gt;56 &lt;tr&gt;57 &lt;td&gt;&lt;/td&gt;58 &lt;td&gt;&lt;input type=\"submit\" value=\"免费注册\"&gt;&lt;/td&gt;59 &lt;/tr&gt;60 &lt;tr&gt;61 &lt;td&gt;&lt;/td&gt;62 &lt;td&gt;&lt;input type=\"checkbox\" checked=\"checked\"&gt;&lt;label&gt;我同意注册条款和会员加入标准&lt;/label&gt;&lt;/td&gt;63 &lt;/tr&gt;64 &lt;tr&gt;65 &lt;td&gt;&lt;/td&gt;66 &lt;td&gt;67 &lt;a href=\"#\"&gt;我是会员，立即登录&lt;/a&gt;68 &lt;/td&gt;69 &lt;/tr&gt;70 &lt;tr&gt;71 &lt;td&gt;&lt;/td&gt;72 &lt;td&gt; 73 &lt;h3&gt;我承诺&lt;/h3&gt;74 &lt;ul&gt;75 &lt;li&gt;年满18岁、单身&lt;/li&gt;76 &lt;li&gt;抱着严肃态度&lt;/li&gt;77 &lt;li&gt;真诚寻找另一半&lt;/li&gt;78 &lt;/ul&gt;79 &lt;/td&gt;80 &lt;/tr&gt;81 &lt;/table&gt; CSS —— 衣服JavaScript ——行为","categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Web/"}]},{"title":"熟悉Github","slug":"熟悉Github","date":"2020-10-20T13:58:24.000Z","updated":"2020-10-20T08:20:14.495Z","comments":true,"path":"熟悉Github/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/%E7%86%9F%E6%82%89Github/","excerpt":"","text":"最常用的GIT命令 git clone ​ 克隆代码：git clone + 地址 git pull ​ 拉取代码 git status 查看工作区状态 git log 查看过往记录 git add 提交到暂存区 git commit -m “提交注释” 提交到本地仓库 git push 提交到远程仓库 Github搜索技巧 in:name dev-tester 按项目名称(name)查找 in:description 按项目描述查找 in:readme 按照README描述查找 starts:&gt;1000 设置星星数查询范围 forks:&gt;500 设置fork数查询范围 language: 按照项目语言查询 user: 按照项目作者查找 size:&gt;=500 按照项目大小查询","categories":[],"tags":[]},{"title":"拉勾网项目","slug":"拉勾网项目","date":"2020-10-14T14:12:57.000Z","updated":"2020-10-26T04:40:59.890Z","comments":true,"path":"拉勾网项目/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/%E6%8B%89%E5%8B%BE%E7%BD%91%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;6 &lt;title&gt;Document&lt;/title&gt;7 &lt;style type=\"text/css\"&gt;8 9 *&#123;margin: 0; padding: 0;&#125;/*统一去掉所有图片的内边距*/10 input&#123;border: none;&#125;11 a&#123;text-decoration: none; color: black;&#125;/*去掉文字的下划线*/12 li&#123;list-style: none;&#125;/*清除元素的默认样式*/1314 .main&#123; /*把共同的CSS样式提取出来以便重复利用*/15 width: 1205px;16 margin: 0 auto; /*上下为0，左右为auto（居中）*/17 &#125;1819 /**/20 .fl&#123;float: left;&#125;21 .fr&#123;float: right;&#125;22 .clearfloat:after&#123; /*清除float样式*/23 content: \"\";24 display: block;25 clear: both;26 &#125;27 28 .header&#123; /*头部*/29 height: 160px;30 &#125;3132 .header .h_top&#123; /*头部的上部分*/33 height: 40px;34 background: #2a2e2f; 35 &#125;3637 .header .h_top .topCon&#123; /*头部的上部分的内容*/38 height: 40px;39 &#125;4041 .header .h_top .topCon .conLeft&#123;42 height: 40px;43 line-height: 40px; /*使其上下居中*/44 &#125;4546 .header .h_top .topCon .conLeft .leftTxt1&#123;47 height: 40px;48 &#125;4950 .header .h_top .topCon .conLeft .leftTxt1 .logo&#123;51 color: #00b38a;52 font-size: 22px;53 padding-right: 34px;54 &#125;5556 .header .h_top .topCon .conLeft .leftTxt1 .city&#123;57 color: #42f3cd;58 font-size: 13px;59 padding-right: 12px;60 &#125;6162 .header .h_top .topCon .conLeft .leftTxt1 .change_city&#123;63 font-size: 12px;64 color: #bbb5ac;65 padding-right: 35px;66 &#125;6768 .header .h_top .topCon .conLeft .ulList li&#123;69 float: left; /*这里进行浮动，它的父级元素就会进行塌陷,所以要找到父级元素清除浮动*/70 height: 40px;71 padding-left: 21px;72 padding-right: 21px;73 &#125;7475 .header .h_top .topCon .conLeft .ulList li a&#123;76 color: #e8e6e3;77 font-size: 14px;78 &#125;7980 .header .h_top .topCon .conRight&#123;81 height: 40px;82 &#125;8384 .header .h_top .topCon .conRight .ul_list&#123;85 line-height: 40px;86 &#125;8788 .header .h_top .topCon .conRight .ul_list li&#123;89 float: left;90 &#125;9192 .header .h_top .topCon .conRight .ul_list li a&#123;93 display: block; /*如果不加则必须点击文字的时候才能触发，如果加了就会把它变成块元素，只要点击那一块区域即可*/94 font-size: 14px;95 color: #bbb5ac;96 &#125;9798 .header .h_top .topCon .conRight .ul_list li .login span&#123;99 padding-left: 28px;100 background-position: 0px;101 background-image: url(../拉勾网/icon_login.png);102 background-repeat: no-repeat; /*不让图标重复填满指定的区域*/103 background-size: 18px 18px;104 &#125;105106 .header .h_top .topCon .conRight .ul_list li .zc span&#123;107 padding: 0px 7px;108 &#125;109110 .header .h_top .topCon .conRight .ul_list li .zc&#123;111 padding-right: 32px;112 &#125;113114 .header .h_top .topCon .conRight .ul_list li .app&#123;115 color: #35f2d4;116 padding-right: 20px;117 &#125;118 .header .h_top .topCon .conRight .ul_list li .app span&#123;119 float: left;120 width: 12px;121 height: 18px;122 display: block;123 background-image: url(../拉勾网/icon_phone.png);124 background-repeat: no-repeat; /*不让图标重复填满指定的区域*/125 background-size: 12px 18px;126 background-position: 0px 0px;127 margin-top: 11px;128 margin-right: 8px;129 &#125;130131 .header .h_bottom&#123; /*头部的下部分*/132 height: 120px;133 background: #008f6e;134 135 &#125;136137 .header .h_bottom .botCon&#123;138 height: 120px;139 &#125;140141 .header .h_bottom .botCon .conleft&#123;142 position: relative; /*把conleft当成参考物*/143 width: 573px;144 height: 120px;145 background: url(../拉勾网/logo_41a2761.png) no-repeat;146 background-size: 228px 120px; /*宽 高*/147 &#125;148149 .header .h_bottom .botCon .conleft .imgBox&#123;150 position: absolute; /*absolute是相对于relative，即\".header .h_bottom .botCon .conleft\"的位置*/151 top: 38px;152 left: 246px;153 &#125;154155 .header .h_bottom .botCon .conleft .imgBox img&#123;156 width: 334px;157 height: 30px;158 159 &#125;160161 .header .h_bottom .botCon .conleft .textBox&#123;162 width: 334px;163 height: 22px;164 position: absolute;165 top: 74px;166 left: 246px;167 font-size: 14px;168 color: #e8e6e3;169 &#125;170171 .header .h_bottom .botCon .conright&#123;172 width: 486px;173 height: 120px;174 position: relative;175 &#125;176177 .header .h_bottom .botCon .conright .btnBox&#123;178 height: 35px;179 position: absolute;180 top: 35%;181 width: 100%;182 color: #757575;183 font-size: 14px;184 &#125;185186 .header .h_bottom .botCon .conright .btnBox .phone_number&#123;187 width: 212px;188 height: 35px;189 margin-right: 8px;190 text-indent: 10px; /*缩进xx个像素*/191 &#125;192193 .header .h_bottom .botCon .conright .btnBox .code&#123;194 width: 146px;195 height: 35px;196 background: #fff;197 margin-right: 10px;198 &#125;199200 .header .h_bottom .botCon .conright .btnBox .code .text_code&#123;201 width: 94px;202 height: 35px;203 text-indent: 10px;204 &#125;205206 .header .h_bottom .botCon .conright .btnBox .code .get&#123;207 padding: 6px 4px 6px;208 width: 51px;209 color: #2ff1cb;210 background: white;211 height: 35px;212 &#125;213214 .header .h_bottom .botCon .conright .btnBox .sub&#123;215 width: 106px;216 height: 34px;217 border: 1px #ccefe7 solid;218 background-color: unset;219 color: #bad5cc;220 &#125;221222 .sear&#123;223 height: 132px;224 background: #f2f5f4;225 &#125;226227 .sear .searCon&#123;228 height: 132px;229 position: relative;230 &#125;231232 .sear .searCon .search&#123;233 height: 47px;234 width: 937px;235 position: absolute;236 top: 30px;237 left: 137px;238 &#125;239240 .sear .searCon .search input&#123;241 width: 794px;242 height: 45px;243 text-indent: 17px;244 border: 1px #65625e solid;245 background: white;246 &#125;247 .sear .searCon .search a&#123;248 background: #008f6e;249 padding: 10px 54px 15px;250 text-align: center;251 position: absolute;252 &#125;253 .banner&#123;254 height: 462px;255 &#125;256 .banner .banner_left&#123;257 width: 304px;258 height: 346px;259 background: white;260 margin-top: 48px;261 &#125;262 .banner .banner_right&#123;263 width: 842px;264 height: 347px;265 margin-top: 46px;266 position: relative;267 &#125;268 .banner .banner_left .banlist&#123;269 font-size: 14px;270 width: 281px;271 height: 346px;272 &#125;273 .banner .banner_left ul li&#123;274 padding-bottom: 29px;275 width: 321px;276 height: 18px; 277 &#125;278 .banner .banner_left ul li a&#123;279 color: black;280 padding: 0px 8px;281 margin: 0px 0px 5px 5px;282 &#125;283 .banner .banner_left ul li span&#123;284 padding-top: 5px;285 color: black;286 font-family: \"宋体\";287 float: right;288 &#125;289 .banner .banner_left ul li a:first-child&#123;290 font-size: 17px;291 padding: 0px;292 margin: 0px;293 &#125;294 .banner .banner_right&#123;295 width: 840px;296 height: 346px;297 overflow: hidden;298 position: relative;299 &#125;300 .banner .banner_right #banImgBox&#123;301 position: absolute;302 height: 346px;303 &#125;304 .banner .banner_right #banImgBox img&#123;305 float: left;306 width: 840px;307 list-style: none;308 &#125;309 .banner .banner_right #select&#123;310 position: absolute;311 bottom: 15px;312 &#125;313 .banner .banner_right #select a&#123;314 width: 8px;315 height: 8px;316 margin: 0 3px;317 background: red;318 float: left;319 text-decoration: none; /*取消下划线*/320 &#125;321 .banner .banner_right #select a:hover&#123;322 background-color: #fff;323 &#125;324 .banner .banner_right:hover span&#123;325 display: block; /*鼠标移出的时候不显示*/326 &#125;327 .banner .banner_right span&#123;328 width: 22px;329 height: 36px;330 font-size: 36px;331 color: white;332 opacity: 0.7;333 font-family: \"宋体\";334 position: absolute;335 top: 152px;336 display: none;337 font-weight: bolder; /*加粗字体*/338 &#125;339 .banner .banner_right .btnright&#123;340 right: 20px;341 &#125;342 .banner .banner_right .btnleft&#123;343 left: 20px;344 &#125;345 .content .line1 .linetop .top1&#123;346 line-height: 53px;347 margin-top: 16px;348 border-bottom: 1px solid rgba(53,58,60,0.6);349 &#125;350 .content .line1 .linetop .top1 a&#123;351 font-size: 16px;352 color: black;353 margin-right: 60px;354 &#125;355 .content .line1 .linetop .top1 .hot&#123;356 border-bottom: 2px solid rgba(53,58,60,0.9);357 padding-bottom: 15px;358 &#125;359 .content .line1 .linetop .conUI .conBox&#123;360 width: 390px;361 height: 200px;362 margin: 16px 14px 16px 0px;363 border: 1px solid rgba(53,58,60,0.6);364 &#125;365366 .content .line1 .linetop .conUI .conUI3 .conBox&#123;367 margin-right: 0px;368 &#125;369 370 .content .line1 .linetop .more&#123;371 width: 388px;372 height: 43px;373 margin: auto;374 border: 1px solid #4fffd7; 375 &#125;376377 .content .line1 .linetop .more a&#123;378 color: #4fffd7;379 width: 388px;380 height: 43px;381 display: block;382 text-align: center;383 line-height: 42px;384 &#125;385 .content .line1 .linetop .conUI .conBox .conBox_content&#123;386 padding-top: 20px;387 width: 352px;388 height: 159px;389 margin: auto;390 position: relative;391 &#125;392 .content .line1 .linetop .conUI .conBox .conBox_content .content_top&#123;393 width: 351px;394 height: 22px;395 &#125;396 .content .line1 .linetop .conUI .conBox .conBox_content .content_top img&#123;397 height: 16px;398 width: 16px;399 position: absolute;400 top: 24px;401 left: 205px;402 &#125;403 .content .line1 .linetop .conUI .conBox .conBox_content .content_top .left&#123;404 color: black;405 text-indent: 19px;406 font-size: 17px;407 &#125; 408 .content .line1 .linetop .conUI .conBox .conBox_content .content_top .mid&#123;409 color: #c8c3bc;410 padding-left: 22px;411 font-size: 13px;412 height: 22px;413 &#125;414 .content .line1 .linetop .conUI .conBox .conBox_content .content_top .right&#123;415 color: #fa4d27;416 &#125;417 .content .line1 .linetop .conUI .conBox .conBox_content .content_mid .top&#123;418 width: 115px;419 padding: 5px 0 12px 0;420 &#125;421 .content .line1 .linetop .conUI .conBox .conBox_content .content_mid .top a&#123;422 font-size: 14px;423 color: #a8a095;424 &#125;425 .content .line1 .linetop .conUI .conBox .conBox_content .content_mid&#123;426 width: 350px;427 height: 74px;428 border-bottom: 1px dashed rgba(53,58,60,0.8);429 &#125;430 .content .line1 .linetop .conUI .conBox .conBox_content .content_mid .mid&#123; 431 border: 1px solid rgba(53,58,60,0.6);432 width: 73px;433 height: 26px;434 color: #a8a095;435 line-height: 26px;436 font-size: 12px;437 margin-right: 12px;438 text-align: center;439 440 &#125;441 .content .line1 .linetop .conUI .conBox .conBox_content .content_bottom&#123;442 width: 351px;443 height: 61px;444 &#125;445 .content .line1 .linetop .conUI .conBox .conBox_content .content_bottom img&#123;446 width: 40px;447 height: 40px;448 padding-top: 18px;449 float: left;450 &#125;451 .content .line1 .linetop .conUI .conBox .conBox_content .content_bottom ul&#123;452 margin-top: 15px;453 text-indent: 13px;454 455 &#125;456 .content .line1 .linetop .conUI .conBox .conBox_content .content_bottom ul li a&#123;457 font-size: 14px;458 color: #a8a095;459 &#125;460 &lt;/style&gt;461 &lt;script&gt;462 window.onload = function()&#123;463 var imgList = document.getElementById('banImgBox');464 var imgNum = document.getElementById('banImgBox').getElementsByTagName('img');465 var banner_right = document.getElementsByClassName('banner_right')[0];466 var select = document.getElementById('select');467 var a = document.getElementById('select').getElementsByTagName('a');468469 imgList.style.width = 850 * imgNum.length + 'px';470 select.style.left = (banner_right.offsetWidth - select.offsetWidth)/2 + 'px';471 imgList.style.left = 0 + 'px';472 index = 0;473 for(var i=0;i&lt;imgNum.length;i++)&#123;474 a[i].num = i;//给a[i]添加一个新属性“num”，用来记录它是第几个a标签475 a[i].onclick = function()&#123;476 index = this.num;477 /* imgList.style.left = -840*index + 'px'; */478 for(var j=0;j&lt;imgNum.length;j++)&#123;479 a[j].style.background = '';480 &#125;481 482 a[index].style.background = 'black';483 //添加移动动画484 function move()&#123;485 486 timer = setInterval(function()&#123;487 speed = 20;488 var oldnum = parseInt(imgList.style.left);489 if(oldnum &lt; -840*index)&#123;490 speed = -speed;491 &#125;492 var newnum = oldnum - speed;493 494 imgList.style.left = newnum + 'px';495 if(newnum == -840*index)&#123;496 clearInterval(timer);497 &#125;498 &#125;,3);499 &#125;500 move();501 &#125;502 &#125;503 &#125;504 &lt;/script&gt;505&lt;/head&gt;506&lt;body style=\"background: white; height: 10000px;\"&gt;507 &lt;div id=\"box\"&gt;508 &lt;div class=\"header\"&gt;509 &lt;div class=\"h_top\"&gt;510 &lt;div class=\"topCon main\"&gt;511 &lt;div class=\"conLeft fl\"&gt;512 &lt;div class=\"leftTxt1 fl\"&gt;513 &lt;a href=\"#\" class=\"logo\"&gt;&lt;b&gt;拉钩&lt;/b&gt;&lt;/a&gt;514 &lt;a href=\"#\" class=\"city\"&gt;全国站&lt;/a&gt;515 &lt;a href=\"#\" class=\"change_city\"&gt;[切换城市]&lt;/a&gt;516 &lt;/div&gt;517 &lt;ul class=\"ulList clearfloat fr\"&gt;&lt;!--ul表示列表--&gt;518 &lt;li&gt;&lt;a href=\"#\"&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;!--li标签定义列表项目--&gt;519 &lt;li&gt;&lt;a href=\"#\"&gt;公司&lt;/a&gt;&lt;/li&gt;520 &lt;li&gt;&lt;a href=\"#\"&gt;校园招聘&lt;/a&gt;&lt;/li&gt;521 &lt;li&gt;&lt;a href=\"#\"&gt;职位&lt;/a&gt;&lt;/li&gt;522 &lt;li&gt;&lt;a href=\"#\"&gt;言职&lt;/a&gt;&lt;/li&gt;523 &lt;li&gt;&lt;a href=\"#\"&gt;课程&lt;/a&gt;&lt;/li&gt;524 &lt;/ul&gt;525 &lt;/div&gt;526 &lt;div class=\"conRight fr\"&gt;527 &lt;ul class=\"ul_list clearfloat\"&gt;528 &lt;li&gt;&lt;a href=\"\" class=\"login\"&gt;&lt;span&gt;&lt;/span&gt;登录&lt;/a&gt;&lt;/li&gt;529 &lt;li&gt;&lt;a href=\"\" class=\"zc\"&gt;&lt;span&gt;|&lt;/span&gt;注册&lt;/a&gt;&lt;/li&gt;530 &lt;li&gt;&lt;a href=\"\" class=\"app\"&gt;&lt;span&gt;&lt;/span&gt;拉钩APP&lt;/a&gt;&lt;/li&gt;531 &lt;li&gt;&lt;a href=\"\"&gt;进入企业版&lt;/a&gt;&lt;/li&gt;532 &lt;/ul&gt;533 &lt;/div&gt;534 &lt;/div&gt;535 &lt;/div&gt;536 &lt;div class=\"h_bottom\"&gt;537 &lt;div class=\"botCon main\"&gt;538 &lt;div class=\"conleft fl\"&gt;539 &lt;div class=\"imgBox\"&gt;540 &lt;img src=\"../拉勾网/想去互联网好公司，就上拉钩.png\"&gt;541 &lt;/div&gt;542 &lt;div class=\"textBox\"&gt;1020956家公司 | 77699606个职位，在拉勾等你&lt;/div&gt;543 &lt;/div&gt;544 &lt;div class=\"conright fr\"&gt;545 &lt;div class=\"btnBox\"&gt;546 &lt;input type=\"text\" placeholder=\"输入手机号\" class=\"fl phone_number\"&gt;547 &lt;p class=\"fl code\"&gt;548 &lt;input type=\"text\" placeholder=\"验证码\" class=\"text_code\"&gt;549 |&lt;a href=\"\" class=\"get\"&gt;获取&lt;/a&gt;550 &lt;/p&gt;551 &lt;input type=\"submit\" value=\"登录/注册\" class=\"fl sub\"&gt;552 &lt;/div&gt;553 &lt;/div&gt;554 &lt;/div&gt;555 &lt;/div&gt;556 &lt;/div&gt;&lt;!--头部区域--&gt;557 &lt;div class=\"sear\"&gt;558 &lt;div class=\"searCon main\"&gt;559 &lt;div class=\"search\"&gt;560 &lt;input type=\"text\" placeholder=\"搜索职位、公司或地点\"&gt;561 &lt;a href=\"\"&gt;搜索&lt;/a&gt;562 &lt;/div&gt;563 &lt;/div&gt;564 &lt;/div&gt;&lt;!--搜索区域--&gt;565 &lt;div class=\"banner main clearfloat\"&gt;566 &lt;div class=\"banner_left fl\"&gt;567 &lt;ul class=\"banlist\"&gt;568 &lt;li&gt;569 &lt;a href=\"\"&gt;技术&lt;/a&gt;570 &lt;a href=\"\"&gt;Java&lt;/a&gt;571 &lt;a href=\"\"&gt;PHP&lt;/a&gt;572 &lt;a href=\"\"&gt;C++&lt;/a&gt;573 &lt;a href=\"\"&gt;区块链&lt;/a&gt;574 &lt;span&gt;&amp;gt;&lt;/span&gt;575 &lt;/li&gt;576 &lt;li&gt;577 &lt;a href=\"\"&gt;产品&lt;/a&gt;578 &lt;a href=\"\"&gt;产品总监&lt;/a&gt;579 &lt;a href=\"\"&gt;产品经理&lt;/a&gt;580 &lt;span&gt;&amp;gt;&lt;/span&gt;581 &lt;/li&gt;582 &lt;li&gt;583 &lt;a href=\"\"&gt;设计&lt;/a&gt;584 &lt;a href=\"\"&gt;UI设计师&lt;/a&gt;585 &lt;a href=\"\"&gt;交互设计&lt;/a&gt;586 &lt;a href=\"\"&gt;网页设计师&lt;/a&gt;587 &lt;span&gt;&amp;gt;&lt;/span&gt;588 &lt;/li&gt;589 &lt;li&gt;590 &lt;a href=\"\"&gt;运营&lt;/a&gt;591 &lt;a href=\"\" &gt;新媒体运营&lt;/a&gt;592 &lt;a href=\"\"&gt;编辑&lt;/a&gt;593 &lt;a href=\"\"&gt;数据运营&lt;/a&gt;594 &lt;span&gt;&amp;gt;&lt;/span&gt;595 &lt;/li&gt;596 &lt;li&gt;597 &lt;a href=\"\"&gt;市场&lt;/a&gt;598 &lt;a href=\"\"&gt;市场营销&lt;/a&gt;599 &lt;a href=\"\"&gt;市场推广&lt;/a&gt;600 &lt;a href=\"\"&gt;市场策划&lt;/a&gt;601 &lt;span&gt;&amp;gt;&lt;/span&gt;602 &lt;/li&gt;603 &lt;li&gt;604 &lt;a href=\"\"&gt;销售&lt;/a&gt;605 &lt;a href=\"\"&gt;销售专员&lt;/a&gt;606 &lt;a href=\"\"&gt;销售经理&lt;/a&gt;607 &lt;a href=\"\"&gt;销售总监&lt;/a&gt;608 &lt;span&gt;&amp;gt;&lt;/span&gt;609 &lt;/li&gt;610 &lt;li&gt;611 &lt;a href=\"\"&gt;职能&lt;/a&gt;612 &lt;a href=\"\"&gt;HR&lt;/a&gt;613 &lt;a href=\"\"&gt;行政&lt;/a&gt;614 &lt;a href=\"\"&gt;财务&lt;/a&gt;615 &lt;a href=\"\"&gt;审计&lt;/a&gt;616 &lt;span&gt;&amp;gt;&lt;/span&gt;617 &lt;/li&gt;618 &lt;li&gt;619 &lt;a href=\"\"&gt;游戏&lt;/a&gt;620 &lt;a href=\"\"&gt;小游戏开发&lt;/a&gt;621 &lt;a href=\"\"&gt;U3D&lt;/a&gt;622 &lt;a href=\"\"&gt;游戏策划&lt;/a&gt;623 &lt;span&gt;&amp;gt;&lt;/span&gt;624 &lt;/li&gt;625 &lt;/ul&gt;626 &lt;/div&gt;627 &lt;div class=\"banner_right fr\"&gt;628 &lt;div id=\"banImgBox\"&gt;629 &lt;img src=\"../拉勾网/1.JPG\"&gt;630 &lt;img src=\"../拉勾网/2.JPG\"&gt;631 &lt;img src=\"../拉勾网/3.JPG\"&gt;632 &lt;/div&gt;633 &lt;div id=\"select\"&gt;634 &lt;a href=\"javascript:;\"&gt;&lt;/a&gt;635 &lt;a href=\"javascript:;\"&gt;&lt;/a&gt;636 &lt;a href=\"javascript:;\"&gt;&lt;/a&gt;637 &lt;/div&gt;638 &lt;span class=\"btnleft\"&gt;&lt;a href=\"\"&gt;&amp;lt;&lt;/a&gt;&lt;/span&gt;639 &lt;span class=\"btnright\"&gt;&lt;a href=\"\"&gt;&amp;gt;&lt;/a&gt;&lt;/span&gt;640 &lt;/div&gt;641 &lt;/div&gt;&lt;!--轮播图区域--&gt;642 &lt;div class=\"content main\"&gt;643 &lt;div class=\"line1\"&gt;644 &lt;div class=\"linetop\"&gt;645 &lt;div class=\"top1\"&gt;646 &lt;a href=\"\" class=\"hot\"&gt;24Hour热门&lt;/a&gt;647 &lt;a href=\"\"&gt;最新职位&lt;/a&gt;648 &lt;/div&gt;649 &lt;div class=\"conUI clearfloat\"&gt;650 &lt;ul class=\"conUI1 fl\"&gt;651 &lt;div class=\"conBox\"&gt;652 &lt;div class=\"conBox_content\"&gt;653 &lt;div class=\"content_top\"&gt;654 &lt;a class=\"left\"&gt;测试leader...&lt;/a&gt;655 &lt;a class=\"mid\"&gt;[一天前发布]&lt;/a&gt;656 &lt;img src=\"../拉勾网/icon_chat2_d162651.png\"&gt;657 &lt;a class=\"right fr\"&gt;30k-50k&lt;/a&gt;658 &lt;/div&gt;659 &lt;div class=\"content_mid\"&gt;660 &lt;div class=\"top\"&gt;661 &lt;a&gt;经验3-5年 / 本科&lt;/a&gt;662 &lt;/div&gt;663 &lt;div class=\"mid fl\"&gt;664 &lt;span class=\"arm\"&gt;ARM&lt;/span&gt;665 &lt;/div&gt;666 &lt;div class=\"mid fl\"&gt;667 &lt;span class=\"zhineng\"&gt;人工智能&lt;/span&gt;668 &lt;/div&gt;669 &lt;div class=\"mid fl\"&gt;670 &lt;span class=\"android\"&gt;Android&lt;/span&gt;671 &lt;/div&gt;672 &lt;/div&gt;673 &lt;div class=\"content_bottom\"&gt;674 &lt;img src=\"../拉勾网/Cgq2xl5p5GCAOVKpAAC0WGrasfc907.png\"&gt;675 &lt;ul class=\"fl\"&gt;676 &lt;li&gt;&lt;a href=\"\"&gt;安思疆&lt;/a&gt;&lt;/li&gt;677 &lt;li&gt;&lt;a&gt;人工智能 / B轮 / 深圳&lt;/a&gt;&lt;/li&gt;678 &lt;/ul&gt;679 &lt;/div&gt;680 &lt;/div&gt;681 &lt;/div&gt;682 &lt;div class=\"conBox\"&gt;683 &lt;div class=\"conBox_content\"&gt;684 &lt;div class=\"content_top\"&gt;685 &lt;a class=\"left\"&gt;测试leader...&lt;/a&gt;686 &lt;a class=\"mid\"&gt;[一天前发布]&lt;/a&gt;687 &lt;img src=\"../拉勾网/icon_chat2_d162651.png\"&gt;688 &lt;a class=\"right fr\"&gt;30k-50k&lt;/a&gt;689 &lt;/div&gt;690 &lt;div class=\"content_mid\"&gt;691 &lt;div class=\"top\"&gt;692 &lt;a&gt;经验3-5年 / 本科&lt;/a&gt;693 &lt;/div&gt;694 &lt;div class=\"mid fl\"&gt;695 &lt;span class=\"arm\"&gt;ARM&lt;/span&gt;696 &lt;/div&gt;697 &lt;div class=\"mid fl\"&gt;698 &lt;span class=\"zhineng\"&gt;人工智能&lt;/span&gt;699 &lt;/div&gt;700 &lt;div class=\"mid fl\"&gt;701 &lt;span class=\"android\"&gt;Android&lt;/span&gt;702 &lt;/div&gt;703 &lt;/div&gt;704 &lt;div class=\"content_bottom\"&gt;705 &lt;img src=\"../拉勾网/Cgq2xl5p5GCAOVKpAAC0WGrasfc907.png\"&gt;706 &lt;ul class=\"fl\"&gt;707 &lt;li&gt;&lt;a href=\"\"&gt;安思疆&lt;/a&gt;&lt;/li&gt;708 &lt;li&gt;&lt;a&gt;人工智能 / B轮 / 深圳&lt;/a&gt;&lt;/li&gt;709 &lt;/ul&gt;710 &lt;/div&gt;711 &lt;/div&gt;712 &lt;/div&gt;713 &lt;div class=\"conBox\"&gt;714 &lt;div class=\"conBox_content\"&gt;715 &lt;div class=\"content_top\"&gt;716 &lt;a class=\"left\"&gt;测试leader...&lt;/a&gt;717 &lt;a class=\"mid\"&gt;[一天前发布]&lt;/a&gt;718 &lt;img src=\"../拉勾网/icon_chat2_d162651.png\"&gt;719 &lt;a class=\"right fr\"&gt;30k-50k&lt;/a&gt;720 &lt;/div&gt;721 &lt;div class=\"content_mid\"&gt;722 &lt;div class=\"top\"&gt;723 &lt;a&gt;经验3-5年 / 本科&lt;/a&gt;724 &lt;/div&gt;725 &lt;div class=\"mid fl\"&gt;726 &lt;span class=\"arm\"&gt;ARM&lt;/span&gt;727 &lt;/div&gt;728 &lt;div class=\"mid fl\"&gt;729 &lt;span class=\"zhineng\"&gt;人工智能&lt;/span&gt;730 &lt;/div&gt;731 &lt;div class=\"mid fl\"&gt;732 &lt;span class=\"android\"&gt;Android&lt;/span&gt;733 &lt;/div&gt;734 &lt;/div&gt;735 &lt;div class=\"content_bottom\"&gt;736 &lt;img src=\"../拉勾网/Cgq2xl5p5GCAOVKpAAC0WGrasfc907.png\"&gt;737 &lt;ul class=\"fl\"&gt;738 &lt;li&gt;&lt;a href=\"\"&gt;安思疆&lt;/a&gt;&lt;/li&gt;739 &lt;li&gt;&lt;a&gt;人工智能 / B轮 / 深圳&lt;/a&gt;&lt;/li&gt;740 &lt;/ul&gt;741 &lt;/div&gt;742 &lt;/div&gt;743 &lt;/div&gt;744 &lt;/ul&gt;745 &lt;ul class=\"conUI2 fl\"&gt;746 &lt;div class=\"conBox\"&gt;747 &lt;div class=\"conBox_content\"&gt;748 &lt;div class=\"content_top\"&gt;749 &lt;a class=\"left\"&gt;测试leader...&lt;/a&gt;750 &lt;a class=\"mid\"&gt;[一天前发布]&lt;/a&gt;751 &lt;img src=\"../拉勾网/icon_chat2_d162651.png\"&gt;752 &lt;a class=\"right fr\"&gt;30k-50k&lt;/a&gt;753 &lt;/div&gt;754 &lt;div class=\"content_mid\"&gt;755 &lt;div class=\"top\"&gt;756 &lt;a&gt;经验3-5年 / 本科&lt;/a&gt;757 &lt;/div&gt;758 &lt;div class=\"mid fl\"&gt;759 &lt;span class=\"arm\"&gt;ARM&lt;/span&gt;760 &lt;/div&gt;761 &lt;div class=\"mid fl\"&gt;762 &lt;span class=\"zhineng\"&gt;人工智能&lt;/span&gt;763 &lt;/div&gt;764 &lt;div class=\"mid fl\"&gt;765 &lt;span class=\"android\"&gt;Android&lt;/span&gt;766 &lt;/div&gt;767 &lt;/div&gt;768 &lt;div class=\"content_bottom\"&gt;769 &lt;img src=\"../拉勾网/Cgq2xl5p5GCAOVKpAAC0WGrasfc907.png\"&gt;770 &lt;ul class=\"fl\"&gt;771 &lt;li&gt;&lt;a href=\"\"&gt;安思疆&lt;/a&gt;&lt;/li&gt;772 &lt;li&gt;&lt;a&gt;人工智能 / B轮 / 深圳&lt;/a&gt;&lt;/li&gt;773 &lt;/ul&gt;774 &lt;/div&gt;775 &lt;/div&gt;776 &lt;/div&gt;777 &lt;div class=\"conBox\"&gt;778 &lt;div class=\"conBox_content\"&gt;779 &lt;div class=\"content_top\"&gt;780 &lt;a class=\"left\"&gt;测试leader...&lt;/a&gt;781 &lt;a class=\"mid\"&gt;[一天前发布]&lt;/a&gt;782 &lt;img src=\"../拉勾网/icon_chat2_d162651.png\"&gt;783 &lt;a class=\"right fr\"&gt;30k-50k&lt;/a&gt;784 &lt;/div&gt;785 &lt;div class=\"content_mid\"&gt;786 &lt;div class=\"top\"&gt;787 &lt;a&gt;经验3-5年 / 本科&lt;/a&gt;788 &lt;/div&gt;789 &lt;div class=\"mid fl\"&gt;790 &lt;span class=\"arm\"&gt;ARM&lt;/span&gt;791 &lt;/div&gt;792 &lt;div class=\"mid fl\"&gt;793 &lt;span class=\"zhineng\"&gt;人工智能&lt;/span&gt;794 &lt;/div&gt;795 &lt;div class=\"mid fl\"&gt;796 &lt;span class=\"android\"&gt;Android&lt;/span&gt;797 &lt;/div&gt;798 &lt;/div&gt;799 &lt;div class=\"content_bottom\"&gt;800 &lt;img src=\"../拉勾网/Cgq2xl5p5GCAOVKpAAC0WGrasfc907.png\"&gt;801 &lt;ul class=\"fl\"&gt;802 &lt;li&gt;&lt;a href=\"\"&gt;安思疆&lt;/a&gt;&lt;/li&gt;803 &lt;li&gt;&lt;a&gt;人工智能 / B轮 / 深圳&lt;/a&gt;&lt;/li&gt;804 &lt;/ul&gt;805 &lt;/div&gt;806 &lt;/div&gt;807 &lt;/div&gt;808 &lt;div class=\"conBox\"&gt;809 &lt;div class=\"conBox_content\"&gt;810 &lt;div class=\"content_top\"&gt;811 &lt;a class=\"left\"&gt;测试leader...&lt;/a&gt;812 &lt;a class=\"mid\"&gt;[一天前发布]&lt;/a&gt;813 &lt;img src=\"../拉勾网/icon_chat2_d162651.png\"&gt;814 &lt;a class=\"right fr\"&gt;30k-50k&lt;/a&gt;815 &lt;/div&gt;816 &lt;div class=\"content_mid\"&gt;817 &lt;div class=\"top\"&gt;818 &lt;a&gt;经验3-5年 / 本科&lt;/a&gt;819 &lt;/div&gt;820 &lt;div class=\"mid fl\"&gt;821 &lt;span class=\"arm\"&gt;ARM&lt;/span&gt;822 &lt;/div&gt;823 &lt;div class=\"mid fl\"&gt;824 &lt;span class=\"zhineng\"&gt;人工智能&lt;/span&gt;825 &lt;/div&gt;826 &lt;div class=\"mid fl\"&gt;827 &lt;span class=\"android\"&gt;Android&lt;/span&gt;828 &lt;/div&gt;829 &lt;/div&gt;830 &lt;div class=\"content_bottom\"&gt;831 &lt;img src=\"../拉勾网/Cgq2xl5p5GCAOVKpAAC0WGrasfc907.png\"&gt;832 &lt;ul class=\"fl\"&gt;833 &lt;li&gt;&lt;a href=\"\"&gt;安思疆&lt;/a&gt;&lt;/li&gt;834 &lt;li&gt;&lt;a&gt;人工智能 / B轮 / 深圳&lt;/a&gt;&lt;/li&gt;835 &lt;/ul&gt;836 &lt;/div&gt;837 &lt;/div&gt;838 &lt;/div&gt;839 &lt;/ul&gt;840 &lt;ul class=\"conUI3 fr\"&gt;841 &lt;div class=\"conBox\"&gt;842 &lt;div class=\"conBox_content\"&gt;843 &lt;div class=\"content_top\"&gt;844 &lt;a class=\"left\"&gt;测试leader...&lt;/a&gt;845 &lt;a class=\"mid\"&gt;[一天前发布]&lt;/a&gt;846 &lt;img src=\"../拉勾网/icon_chat2_d162651.png\"&gt;847 &lt;a class=\"right fr\"&gt;30k-50k&lt;/a&gt;848 &lt;/div&gt;849 &lt;div class=\"content_mid\"&gt;850 &lt;div class=\"top\"&gt;851 &lt;a&gt;经验3-5年 / 本科&lt;/a&gt;852 &lt;/div&gt;853 &lt;div class=\"mid fl\"&gt;854 &lt;span class=\"arm\"&gt;ARM&lt;/span&gt;855 &lt;/div&gt;856 &lt;div class=\"mid fl\"&gt;857 &lt;span class=\"zhineng\"&gt;人工智能&lt;/span&gt;858 &lt;/div&gt;859 &lt;div class=\"mid fl\"&gt;860 &lt;span class=\"android\"&gt;Android&lt;/span&gt;861 &lt;/div&gt;862 &lt;/div&gt;863 &lt;div class=\"content_bottom\"&gt;864 &lt;img src=\"../拉勾网/Cgq2xl5p5GCAOVKpAAC0WGrasfc907.png\"&gt;865 &lt;ul class=\"fl\"&gt;866 &lt;li&gt;&lt;a href=\"\"&gt;安思疆&lt;/a&gt;&lt;/li&gt;867 &lt;li&gt;&lt;a&gt;人工智能 / B轮 / 深圳&lt;/a&gt;&lt;/li&gt;868 &lt;/ul&gt;869 &lt;/div&gt;870 &lt;/div&gt;871 &lt;/div&gt;872 &lt;div class=\"conBox\"&gt;873 &lt;div class=\"conBox_content\"&gt;874 &lt;div class=\"content_top\"&gt;875 &lt;a class=\"left\"&gt;测试leader...&lt;/a&gt;876 &lt;a class=\"mid\"&gt;[一天前发布]&lt;/a&gt;877 &lt;img src=\"../拉勾网/icon_chat2_d162651.png\"&gt;878 &lt;a class=\"right fr\"&gt;30k-50k&lt;/a&gt;879 &lt;/div&gt;880 &lt;div class=\"content_mid\"&gt;881 &lt;div class=\"top\"&gt;882 &lt;a&gt;经验3-5年 / 本科&lt;/a&gt;883 &lt;/div&gt;884 &lt;div class=\"mid fl\"&gt;885 &lt;span class=\"arm\"&gt;ARM&lt;/span&gt;886 &lt;/div&gt;887 &lt;div class=\"mid fl\"&gt;888 &lt;span class=\"zhineng\"&gt;人工智能&lt;/span&gt;889 &lt;/div&gt;890 &lt;div class=\"mid fl\"&gt;891 &lt;span class=\"android\"&gt;Android&lt;/span&gt;892 &lt;/div&gt;893 &lt;/div&gt;894 &lt;div class=\"content_bottom\"&gt;895 &lt;img src=\"../拉勾网/Cgq2xl5p5GCAOVKpAAC0WGrasfc907.png\"&gt;896 &lt;ul class=\"fl\"&gt;897 &lt;li&gt;&lt;a href=\"\"&gt;安思疆&lt;/a&gt;&lt;/li&gt;898 &lt;li&gt;&lt;a&gt;人工智能 / B轮 / 深圳&lt;/a&gt;&lt;/li&gt;899 &lt;/ul&gt;900 &lt;/div&gt;901 &lt;/div&gt;902 &lt;/div&gt;903 &lt;/ul&gt;904 &lt;/div&gt;905 &lt;div class=\"more\"&gt;&lt;a href=\"\"&gt;查看更多&lt;/a&gt;&lt;/div&gt;906 &lt;/div&gt;907 &lt;/div&gt;908 &lt;/div&gt;&lt;!--内容区域--&gt;909 &lt;div class=\"footer\"&gt;&lt;/div&gt;&lt;!--底部区域--&gt;910 &lt;/div&gt;911&lt;/body&gt;912&lt;/html&gt; 效果如下：","categories":[],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/HTML/"}]},{"title":"无题","slug":"记一次","date":"2020-10-13T13:58:24.000Z","updated":"2020-10-15T04:46:27.456Z","comments":true,"path":"记一次/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/%E8%AE%B0%E4%B8%80%E6%AC%A1/","excerpt":"","text":"经历了一个漫长假期，我也终于来到了当初所期待的大三，但是一切并没有想象的那个样子。。。或者生活本该如此吧。看着陆陆续续拖着行李箱进入校园的学弟学妹们，突然意识到自己竟不知不觉间成为了大三老腊肉T﹏T可能也是因为到了大三了吧，面临着考研和就业的选择，我也突然意识到自己在大学期间并没有学到什么能够真正在工作中应用到的技能。有所谓：技多不压身，可我反复细数，自己可怜的连一个都没有。后悔啊，后悔当初没有好好学习，拿奖学金，没有趁早参与到比赛中去。可现在一切都晚了。 • 永远不要为已经发生过的事情去后悔，那将毫无意义最近接触了前端之后，突然对这个短期内可以有获得感的领悟欣喜万分。为什么就没有早点接触它呢？我想这一刻我找到了自己想要的东西，它来的有点晚，但总是还不算太晚。当是上天给我指明的方向吧。 • 但行此事，莫问前程我这个人总是顾虑很多，像是与人对弈般小心翼翼，生怕自己的一个决定毁了整个人生。当我下定决心选择It行业后，我会想it是不是已经趋于饱和了？毕业以后是不是要去大城市与父母常年见不了几次面？甚至我连后面的几十年都能考虑到。可能正是这些顾虑导致了今天的我。当然，我是不后悔的，毕竟一路走来都是自己的选择。或许说，大部分时候，根本没有正确的选择，我们只不过是要努力奋斗，让当初的选择变得正确吧。现在的我再也不想听：“通信专业虽然难但是熬下去还是很吃香的；你想好了没，IT可不是想进就能进的；现在学前端没有前途了，学人工智能才有前途”诸如此类的话了。现在的我只想为了自己向前冲一次，哪怕跌的粉身碎骨也心甘情愿，看看这小子到底能走多远。我把今年一年的时间当成最后的救命稻草，我拼命的想要抓住它，惟愿心安。","categories":[],"tags":[]},{"title":"JavaScript","slug":"JavaScript","date":"2020-10-11T08:20:00.000Z","updated":"2020-10-12T14:11:03.092Z","comments":true,"path":"JavaScript/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/JavaScript/","excerpt":"","text":"DOM创建带文本的元素节点1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;6 &lt;title&gt;Document&lt;/title&gt;7&lt;/head&gt;8&lt;script&gt;9 /*10 创建一个节点11 createElement():document.createElement(标签名);1213 把创建的节点添加到里面14 appendChild():parent.appendChild(newNode)15 将 newNode插入到parent子节点末尾1617 createTextNode():document.createElement('span');18 创建一个文本节点19 */2021 //创建一个带文本的节点并插入到指定的节点当中去22 window.onload = function()&#123;23 var obtn = document.getElementById('btn');24 var odiv = document.getElementById('name');25 obtn.onclick = function()&#123;26 // var node = document.createElement('span');2728 //给span标签文本29 // var otext = document.createTextNode('文本内容');30 // node.appendChild(otext);31 // odiv.appendChild(node);3233 createElementWidthTxt('span','是大概多少');34 &#125; 35 &#125;3637 //把上面的功能封装成一个函数38 function createElementWidthTxt(tagName, txt)&#123;39 var node = document.createElement(tagName);40 var oTxt = document.createTextNode(txt);41 var odiv = document.getElementById('name');42 node.appendChild(oTxt);43 odiv.appendChild(node);44 &#125;45&lt;/script&gt;46&lt;body&gt;47 &lt;div id=\"name\"&gt;48 &lt;p&gt;p&lt;/p&gt;49 &lt;em&gt;斜体&lt;/em&gt;50 &lt;/div&gt;51 &lt;button id=\"btn\"&gt;按钮&lt;/button&gt;52&lt;/body&gt;53&lt;/html&gt; 元素节点的属性1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;6 &lt;title&gt;Document&lt;/title&gt;7&lt;/head&gt;8&lt;script&gt;9 /*10 节点分为元素节点、属性节点、文本节点，11 而这些节点都有三个属性：nodeName、nodeType、nodeValue12 */13 window.onload = function()&#123;14 var odiv = document.getElementById('div1');15 alert(odiv.childNodes.length); //childNodes就是获取当前元素的所有子节点16 17 //元素节点的三个属性输出18 alert(odiv.childNodes[0].nodeName);//EM19 alert(odiv.childNodes[0].nodeType);//120 alert(odiv.childNodes[0].nodeValue);//null2122 //文本节点的三个属性输出23 alert(odiv.childNodes[1].nodeName);//#text24 alert(odiv.childNodes[1].nodeType);//325 alert(odiv.childNodes[1].nodeValue);//文本内容2627 /*28 firstChild 快速找到元素节点的子节点的第一个29 lastChild 快速找到元素节点子节点的最后一个30 */31 alert(odiv.firstChild.nodeName); //EM32 alert(odiv.lastChild.nodeName); //strong33 34 35 &#125;36&lt;/script&gt;37&lt;body&gt;38 &lt;div id=\"div1\"&gt;39 &lt;em&gt;斜体&lt;/em&gt;40 文本内容41 &lt;strong&gt;粗体&lt;/strong&gt;42 &lt;/div&gt;43&lt;/body&gt;44&lt;/html&gt; 元素节点获取的封装1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;6 &lt;title&gt;Document&lt;/title&gt;7 &lt;script&gt;8 /*9 id document.getElementById()1011 tagName node.getElementByTagName()1213 name document。getElementsByname()14 15 className document.getElementsByClassName()16 17 下列可以通过封装一个函数，拥有上述几种获取元素节点的功能(CSS选择器)18 */19 function $(vArg)&#123;20 //对参数区分21 switch(vArg[0])&#123;22 case '#':23 return document.getElementById(vArg.substring(1));24 break;25 case '.':26 return elementByClassName(document, vArg.substring(1));27 break;28 default: 29 var str = vArg.substring(0,5);30 if(str == 'name=')&#123;31 return document.getElementsByName(vArg.substring(5));32 &#125;else&#123;33 return document.getElementsByTagName(vArg);34 &#125;35 break;36 &#125;37 &#125;38 //因为classname在ie浏览器中不兼容，所以要封装一下39 function elementByClassName(parent, classStr)&#123;40 var nodes = parent.getElementsByTagName('*')41 var result = [];42 for(var i=0; i&lt;nodes.length;i++)&#123;43 if(nodes[i].className == classStr)&#123;44 result.push(nodes[i]);45 &#125;46 &#125;47 return result;48 &#125;49 window.onload = function()&#123;50 alert($(\"#div1\").innerHTML);51 alert($('.box').length);52 alert($('.box')[0].innerHTML);53 alert($('name=hello')[0].innerHTML);54 &#125;55 56 &lt;/script&gt;57&lt;/head&gt;58&lt;body&gt;59 &lt;div id=\"div1\"&gt;11111&lt;/div&gt;60 &lt;div class=\"box\"&gt;22222&lt;/div&gt;61 &lt;div name = 'hello'&gt;33333&lt;/div&gt;62&lt;/body&gt;63&lt;/html&gt; 字符串查找1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;6 &lt;title&gt;Document&lt;/title&gt;7 &lt;script&gt;8 var str = 'Abcabcabcdab';9 alert(str.indexOf(\"abcd\",2));//出现子串\"abcd\"的首个位置的下标,数字2代表从下标2开始查10 //同理，lastIndexOf(子串)代表子串在最后一次出现的位置(如果没有则返回-1)11 alert(str.search(/abc/g)); //i代表忽略大小写，g代表全局匹配12 var string = 'how are are you';13 alert(string.replace('are','old are')); //代表用'old are'代表'are'14 alert(string.replace(/are/g,'old are'));//g代表全局替换15 &lt;/script&gt;16&lt;/head&gt;17&lt;body&gt;18 19&lt;/body&gt;20&lt;/html&gt; attribute方法1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;6 &lt;title&gt;Document&lt;/title&gt;7 &lt;script&gt;8 window.onload = function()&#123;9 odiv = document.getElementById('123');10 odiv.setAttribute('xxx','yyy'); //把yyy赋值给为xxx的标签(如果没有这个标签则创建)11 alert(odiv.getAttribute('xxx')); //得到标签为'xxx'的内容12 odiv.removeAttribute('title');//删除标签为title的标签13 &#125;14 &lt;/script&gt;15&lt;/head&gt;16&lt;body&gt;17 &lt;div id=\"123\" title=\"doc\" class=\"nav\"&gt;&lt;/div&gt;18&lt;/body&gt;19&lt;/html&gt; history方法1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;6 &lt;title&gt;Document&lt;/title&gt;7 &lt;script&gt;8 window.onload=function()&#123;9 var write=document.getElementById('write');10 write.onclick=function()&#123;11 alert(history.length);12 &#125;13 var forward=document.getElementById('forward');14 forward.onclick=function()&#123;15 history.forward();16 &#125;17 var back=document.getElementById('back');18 back.onclick=function()&#123;19 history.back();20 &#125;21 &#125;22 &lt;/script&gt;23&lt;/head&gt;24&lt;body&gt;25 &lt;input type=\"button\" value=\"记录\" id=\"write\"&gt;26 &lt;input type=\"button\" value=\"前进\" id=\"forward\"&gt;27 &lt;input type=\"button\" value=\"后退\" id=\"back\"&gt;28&lt;/body&gt;29&lt;/html&gt; insertbefore1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;6 &lt;title&gt;Document&lt;/title&gt;7&lt;/head&gt;8&lt;script src=\"tool.js\"&gt;&lt;/script&gt;9&lt;script&gt;10 /*11 把某个新建的节点插入到旧节点之前12 */13 window.onload = function()&#123;14 var node = createElementWithTxt('strong','strong文本');15 var ospan = document.getElementsByTagName('span')[0];16 insertAfter(node,ospan);1718 19 &#125;2021 //js中没有插入到旧节点之后的，所以自己动手封装一个22 function insertAfter(newNode, oldNode)&#123;23 //判断oldNode是否是最后一个节点24 var parent = oldNode.parentNode;25 if(oldNode == parent.lastChild)&#123;26 //最后一个节点，直接插入到子节点的末尾27 parent.append(newNode);28 &#125;else&#123;29 //插入到oldNode的下一个节点之前30 parent.insertBefore(newNode,oldNode.nextSibling);31 &#125;32 &#125;33&lt;/script&gt;34&lt;body&gt;35 &lt;div id=\"div1\"&gt;36 &lt;p&gt;p&lt;/p&gt;37 &lt;span&gt;span&lt;/span&gt;38 &lt;em&gt;em&lt;/em&gt;39 &lt;/div&gt;40&lt;/body&gt;41&lt;/html&gt; ownerDocument1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;6 &lt;title&gt;Document&lt;/title&gt;7 &lt;script&gt;8 /*9 ownerDocument属性10 返回该节点的文档对象根节点1112 parentNode属性返回该节点的父节点13 previousSibling属性返回该节点的前一个同级节点14 nextSibling属性返回该节点的最后一个同级节点15 */16 window.onload = function()&#123;17 var odiv = document.getElementById('div1');18 alert(odiv.ownerDocument == document); //true19 alert(odiv.parentNode.nodeName);//BODY20 alert(odiv.previousSibling.nodeName);//#text21 &#125;22 &lt;/script&gt;23&lt;/head&gt;24&lt;body&gt;25 &lt;div id=\"div1\"&gt;&lt;/div&gt;26 &lt;p&gt;&lt;/p&gt;27&lt;/body&gt;28&lt;/html&gt; 秒表实现1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;6 &lt;title&gt;Document&lt;/title&gt;7 &lt;script&gt;8 function $(id)&#123;9 return document.getElementById(id);10 &#125;11 window.onload = function()&#123;12 var count = 0;13 var timer = null;14 $('start').onclick = function()&#123; 15 timer = setInterval(function()&#123; //setInterval(function()&#123; alert(\"Hello\"); &#125;, 3000); 每三秒（3000 毫秒）弹出 \"Hello\"16 count++;17 $('id_S').innerHTML = showNum(count % 60);18 $('id_M').innerHTML = showNum(parseInt(count/60) % 60);19 $('id_H').innerHTML = showNum(parseInt(count/3600));20 &#125;,100);21 &#125;22 $('pause').onclick = function()&#123; //只要执行了pause事件，就会触发function函数23 clearInterval(timer);24 &#125;25 $('stop').onclick = function()&#123;26 clearInterval(timer);//取消定时器27 count = 0; //数据清零28 $('id_S').innerHTML = '00'; //innerHTML就是获取标签间的内容29 $('id_M').innerHTML = '00';30 $('id_H').innerHTML = '00';31 &#125;32 &#125;33 function showNum(num)&#123;34 if(num &lt; 10)&#123;35 return '0'+num;36 &#125;else&#123;37 return num;38 &#125;39 &#125;40 &lt;/script&gt;41 &lt;style&gt;42 #div1&#123;43 width: 300px; height: 500px;44 margin: auto;45 margin-top: 200px;46 border: black 1px solid;47 background: rgb(58, 176, 212);48 &#125;49 #div1 input&#123;50 width: 200px; height: 50px;51 margin: auto;52 &#125;53 #count&#123;54 width: 180px; height: 20px;55 margin: auto;56 background: cadetblue;57 margin-top: 100px;58 margin-bottom: 100px;59 border: black 3px solid;60 color: chartreuse;61 &#125;62 #button&#123;63 width: 200px; height: 300px;64 margin: auto;65 &#125;66 &lt;/style&gt;67&lt;/head&gt;68&lt;body&gt;69 &lt;div id = 'div1'&gt;70 &lt;div id = 'count'&gt;71 &lt;span id = 'id_H'&gt;00&lt;/span&gt;:72 &lt;span id = 'id_M'&gt;00&lt;/span&gt;:73 &lt;sapn id = 'id_S'&gt;00&lt;/sapn&gt;74 &lt;/div&gt;75 &lt;div id=\"button\"&gt;76 &lt;input id='start' type=\"button\" value=\"开始\"&gt;77 &lt;input id='pause' type=\"button\" value=\"暂停\"&gt;78 &lt;input id='stop' type=\"button\" value=\"置零\"&gt;79 &lt;/div&gt;80&lt;/body&gt;81&lt;/html&gt; ES6箭头函数1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;6 &lt;title&gt;Document&lt;/title&gt;7&lt;/head&gt;8&lt;body&gt;9 &lt;script&gt;10 //es511 var foo = function()&#123;12 return 1;13 &#125;14 //es6:单条语句15 let ofo = () =&gt; 2;16 console.log(foo(),ofo());17 18 //多条语句19 let oof = (a) =&gt; &#123;20 let b=10;21 return a+b; 22 &#125;23 console.log(oof(10));24 &lt;/script&gt;25&lt;/body&gt;26&lt;/html&gt; 字符串1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;6 &lt;title&gt;Document&lt;/title&gt;7&lt;/head&gt;8&lt;body&gt;9 &lt;ul id='test'&gt;&lt;/ul&gt;10 &lt;script&gt;11 //ES512 /* var obj = &#123;'name':'john','age':20&#125;;13 var name = obj.name;14 var age = obj.age;15 console.log(name + '的年龄是' + age); */1617 //ES618 let ect = &#123;'name':'john','age':20&#125;;19 let&#123;name, age&#125; = ect;20 console.log(`$&#123;name&#125;的年龄是$&#123;age&#125;`); //注意是反引号`21 22 var arr = [0,1,2,3,4];23 let oul = document.getElementById('test');24 var html='';25 for(var i in arr)&#123;26 html += '&lt;li&gt;'+arr[i]+'&lt;/li&gt;';27 &#125;28 oul.innerHTML = html;2930 for(var i in arr)&#123;31 html += `&lt;li&gt;32 &lt;a href=''&gt;$&#123;arr[i]&#125;&lt;/a&gt;33 &lt;/li&gt;`;34 &#125;35 oul.innerHTML = html;36 &lt;/script&gt;37&lt;/body&gt;38&lt;/html&gt; ES61&lt;!--ES6是2015年发布的JS最新标准--&gt;2&lt;!DOCTYPE html&gt;3&lt;html lang=\"en\"&gt;4&lt;head&gt;5 &lt;meta charset=\"UTF-8\"&gt;6 &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;7 &lt;title&gt;Document&lt;/title&gt;8&lt;/head&gt;9&lt;body&gt;10 &lt;script&gt;11 /* let: 用来声明变量，用法类似于var，但是声明的变量只在let命令所在的代码块内有效12 不允许重复定义一个变量13 不能重复声明*/14 let a = 10;15 console.log(a);16 if(a &gt; 5)&#123;17 let b = 20;18 &#125;19 //console.log(b);//代码块外无效，所以不能输出，会出错2021 //解构赋值22 let [c,d,e] = [1,2,3];23 console.log(c,d,e); //1,2,32425 let &#123;f:g&#125; = &#123;f:111&#125;;26 //console.log(f); //出错2728 let &#123;h,i=5&#125; = &#123;h:1&#125;;29 console.log(h,i); //1,530 &lt;/script&gt;31&lt;/body&gt;32&lt;/html&gt; this指向1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;6 &lt;title&gt;Document&lt;/title&gt;7&lt;/head&gt;8&lt;body&gt;9 &lt;script&gt;10 /* var foo = ()=&gt;&#123;11 console.log(this);12 &#125;13 foo(); */1415 var name = 'window';1617 var obj = &#123;18 'name':'john',19 'sayhello':function()&#123;20 console.log(this.name);21 &#125;22 &#125;23 obj.sayhello(); //输出john，说明this指向的是obj的2425 //this指向定义时指向的作用域，而不是执行时所在的作用域26 var ofo = &#123;27 'name':'john',28 'sayhello':()=&gt;&#123;29 console.log(this.name);30 &#125;31 &#125;32 ofo.sayhello(); //输出window，这时this指向的是顶端的name33 //其实上面的程序相当于下面的这一段程序，所以才会显示window而不是john34 var foo = &#123;&#125;;35 foo.name = 'john';36 foo.sayhello = ()=&gt;&#123;37 console.log(this.name);38 &#125;39 foo.sayhello();40 &lt;/script&gt;41&lt;/body&gt;42&lt;/html&gt;","categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Web/"}]},{"title":"英语六级打卡","slug":"英语六级打卡","date":"2020-07-31T04:34:08.000Z","updated":"2020-09-07T03:11:00.052Z","comments":true,"path":"英语六级打卡/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/%E8%8B%B1%E8%AF%AD%E5%85%AD%E7%BA%A7%E6%89%93%E5%8D%A1/","excerpt":"flags: 英语六级 教师资格证 数据结构","text":"flags: 英语六级 教师资格证 数据结构 人真的是越懒就越懒，拖拖拉拉了很久，终于找到了近期的目标。 我将在这里完成六级词汇的打卡。 第一天 打卡！！ 第二天 打卡！！ 第三天 打卡！！ 第四天 打卡！！ 第五天 打卡！！ 第六天 &amp; 第七天 打卡！！ 第八天 打卡！！ 第九天 打卡！！ 第十天 打卡！！ 尴尬了。这周和父亲一起去了合肥找二姐玩了两天，然后就。。。就没心思背单词了。到现在为止，已经一周没打卡了。。明天接着继续！！！ 第十一天 打卡！！ 第十二天 打卡！！ 第十三天 打卡！！ 第十四天 打卡！！ 第十五天 打卡！！","categories":[],"tags":[{"name":"diary","slug":"diary","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/diary/"}]},{"title":"数据结构","slug":"数据结构","date":"2020-05-30T15:51:34.000Z","updated":"2020-10-25T14:55:08.304Z","comments":true,"path":"数据结构/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"","text":"栈括号匹配问题描述 假设表达式中允许有两种括号：圆括号和方括号，其嵌套的顺序随意，即（（）[ ]）或[（[ ] [ ]）]等为正确格式，[（ ]）或（（（]均为不正确的格式。检验括号是否匹配的方法可用“期待的紧迫程度”这个概念来描述。例如：考虑下列的括号序列： [ ( [ ] [ ] ) ] 基本要求 读入含有圆括号和方括号的任意序列，输出“匹配”或“此串括号匹配不合法”。 设计思路 当栈接受了第一个括号“[”后，它期待与其匹配的“]”出现，然而等来的却是“(”，这时候“[”只能“靠边站”，“(”的迫切程度更大，它期待着”）”的出现……以此类推，匹配成功的消去，不成功的继续匹配直到匹配成功 1#include&lt;bits/stdc++.h&gt;2using namespace std;3int main()&#123;4 string s = \"&#123;[([][])]\";5 stack&lt;char&gt; st;6 st.push(s[0]);7 for(int i=1;i&lt;s.length();i++)&#123;8 st.push(s[i]);9 char a = st.top();10 st.pop();11 char b = st.top();12 //取栈顶元素赋给a，然后把出栈，再把栈顶元素赋给b，如果a，b符合条件就全部出栈13 if(int(a) == int(b)+1 || int(a) == int(b)+2)&#123; //(的ascii值是28，)的是29，[的是91，]的是9314 st.pop();15 &#125;16 //如果不匹配就把元素压入栈中17 else&#123;18 st.push(s[i]);19 &#125;20 &#125;21 if(st.empty())&#123;22 cout&lt;&lt;\"success\";23 &#125;24 else&#123;25 cout&lt;&lt;\"false\";26 &#125;27&#125; 走迷宫题目描述 给定一个迷宫，0表示通路，1表示障碍物。找出一个最佳路线（即不能重复经过同一个点） 题目分析 由于题目是“一条路走到黑”，直到不能走了才能退回，所以符合栈的数据类型。当下一个要走的点是0就把它压入栈中，如果是1就出栈从而实现退回的效果。 代码实现 1#include&lt;bits/stdc++.h&gt;2using namespace std;3typedef struct&#123;4 int x;5 int y;//存放有效路径6&#125;font;7int main()&#123;8 int map[8][8]=&#123;9 1,1,1,1,1,1,1,1,10 1,0,0,1,1,1,1,1,11 1,0,0,0,1,1,1,1,12 1,1,1,0,1,0,1,1,13 1,1,0,0,1,1,1,1,14 1,1,0,1,1,1,1,1,15 1,0,0,0,0,0,0,1,16 1,1,1,1,1,1,1,117 &#125;;18 int m = 1;19 int n = 1; //用来存放起点位置20 int endx = 6;21 int endy = 6; //用来存放出口位置22 int dix[4] = &#123;0,1,0,-1&#125;;23 int diy[4] = &#123;1,0,-1,0&#125;;//两个数组用来存放顺时针移动时的方向24 25 stack&lt;font&gt; s;26 font e;27 int i=0,j=0;28 while(!(m==endx &amp;&amp; n==endy))&#123;29 e.x = m+dix[i];30 e.y = n+diy[j];31 s.push(e);32 if(map[e.x][e.y]==0)&#123;33 map[e.x][e.y] = 2;34 m = e.x;35 n = e.y;36 cout&lt;&lt;'('&lt;&lt;m&lt;&lt;','&lt;&lt;n&lt;&lt;')';37 i = j = 0;38 &#125;39 else&#123;40 s.pop();41 i++;j++;42 &#125;43 &#125;44 cout&lt;&lt;endl;45 for(int t=0;t&lt;8;t++)&#123;46 for(int r=0;r&lt;8;r++)&#123;47 cout&lt;&lt;map[t][r];48 &#125;49 cout&lt;&lt;endl;50 &#125;51&#125; KMP算法KMP算法中比较核心的部分就是next数组的代码 所谓next数组，也就是当前下标之前的一段字母中最大匹配长度。比如给定一段字符串“ABABCABAA”，我们可以求得它的先行数组为： 代码是如何写？ 定义一个 i 变量指向pattern数组，j 变量指向 prefix 数组 如果pattern[i] == pattern[j],那就令prefix[j]等于前一个位置上数字加一，并且i++,j++ 如果pattern[i] != pattern[j],那就再进行判断，因为有这种情况： 这时候，C不等于A，我们不能直接令 i 等于零，prefix[j]=0，因为这里的prefix[j]=1,它们有公共部分“A”，所以当判断不相等的时候我们还要再进行判断。只要i大于零，就不停地回溯，直到指向第一个位置，这时候再判断是否相等来决定prefix[j]的值。 具体代码实现如下： 1#include&lt;stdio.h&gt;2void prefix_table(char pattern[],int prefix[],int n)3&#123;4 prefix[0]=0; //prefix数组的第一个元素都默认为零5 int j=1,i=0;6 while(j&lt;n)&#123; //这里用while循环比for要好7 if(pattern[j]==pattern[i])&#123; //如果相等8 i++;9 prefix[j] = i;10 j++;11 &#125;12 else&#123; //如果不相等13 if(i&gt;0)&#123;14 i = prefix[i-1];15 &#125;16 else&#123;17 prefix[j] = i;18 j++;19 &#125; 20 &#125;21 &#125;2223&#125;24int main()25&#123;26 char pattern[] = \"ABABCABAA\";27 int n = 9;28 int prefix[9];29 prefix_table(pattern,prefix,n);30 for(int i=0;i&lt;9;i++)31 printf(\"%d \",prefix[i]);32 return 0;33&#125; 知道了先行数组prefix之和，要对其进行处理，以方便操作。即把数组中的每一位往后移一位，第一个数字令其为-1。 这样，我们就可以写出完整的程序： 1#include&lt;stdio.h&gt;2#include&lt;string.h&gt;3#include&lt;stdlib.h&gt;4void prefix_table(char pattern[],int prefix[],int n)5&#123;6 prefix[0]=0;7 int j=1,i=0;8 while(j&lt;n)&#123;9 if(pattern[j]==pattern[i])&#123;10 i++;11 prefix[j] = i;12 j++;13 &#125;14 else&#123;15 if(i&gt;0)&#123;16 i = prefix[i-1];17 &#125;18 else&#123;19 prefix[j] = i;20 j++;21 &#125; 22 &#125;23 &#125;24&#125;25void move_prefix_table(int prefix[],int n)26&#123;27 for(int i=n-1;i&gt;0;i--)&#123;28 prefix[i] = prefix[i-1];29 &#125;30 prefix[0] = -1;31&#125;32void kmp_search(char pattern[],char text[])33&#123;34 int m = strlen(text);35 int n = strlen(pattern);36 int* prefix = (int*)malloc(sizeof(int)*n);37 prefix_table(pattern,prefix,n);38 move_prefix_table(prefix,n);39 int i=0,j=0;40 while(i&lt;m)&#123;41 if(j==n-1 &amp;&amp; pattern[j]==text[i])&#123;42 printf(\"Found position of the pattern at: %d\",i-j);43 //j = prefix[j];44 break;45 &#125;46 else&#123;47 if(pattern[j]==text[i])&#123;48 i++;j++;49 &#125;50 else&#123;51 if(prefix[j]==-1)&#123;52 i++;j++;53 &#125;54 else&#123;55 j = prefix[j];56 &#125;57 &#125;58 &#125;59 &#125;6061&#125;62int main()63&#123;64 char pattern[] = \"ABABCABAA\";65 char text[] = \"ABABABCABAABABABAB\";66 kmp_search(pattern,text);67&#125;","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"WordCloud","slug":"WordCloud","date":"2020-02-07T11:59:25.000Z","updated":"2020-02-18T04:15:25.292Z","comments":true,"path":"WordCloud/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/WordCloud/","excerpt":"","text":"先来一张效果图 是不是有那么一丝丝的帅气呢 下面就来介绍模板 wordcloud 的使用： 英语/拼音1from wordcloud import WordCloud23string = '''4From fairest creatures we desire increase,5That thereby beauty's rose might never die,6But as the riper should by time decease,7His tender heir might bear his memory:8But thou contracted to thine own bright eyes,9Feed'st thy light's flame with self-substantial fuel,10Making a famine where abundance lies,11Thy self thy foe, to thy sweet self too cruel:12Thou that art now the world's fresh ornament,13And only herald to the gaudy spring,14Within thine own bud buriest thy content,15And tender churl mak'st waste in niggarding:16Pity the world, or else this glutton be,17To eat the world's due, by the grave and thee.18'''19wc = WordCloud(20 #font_path = , 如果string 的内容是中文就要添加font_path参数的内容。21 background_color ='white', #背景色为白色22 width = 1000, #宽度为100023 height = 800 #高度为80024 ).generate(string)25wc.to_file('十四行诗.png') #保存图片，其格式为.png(可以根据需求变换格式) 运行之后源文件目录下会生成图片: 中文不要以为做出了英文形式的，中文就是比葫芦画瓢了，不然会生成一堆乱码，比如: 这是由于没有给参数 font_path 进行赋值，必须赋值为中文字体. 或者是这种情况： 虽然看起来很正常但是它是每一句话成一行，比较生硬，我们要实现分词功能 比如这样： 先看上面这个的代码是如何实现的： 1from wordcloud import WordCloud2import jieba34text = '''5对天生的尤物我们要求蕃盛，6以便美的玫瑰永远不会枯死，7但开透的花朵既要及时凋零，8就应把记忆交给娇嫩的后嗣；9但你，只和你自己的明眸定情，10把自己当燃料喂养眼中的火焰，11和自己作对，待自己未免太狠，12把一片丰沃的土地变成荒田。13你现在是大地的清新的点缀，14又是锦绣阳春的唯一的前锋，15为什么把富源葬送在嫩蕊里，16温柔的鄙夫，要吝啬，反而浪用？17可怜这个世界吧，要不然，贪夫，18就吞噬世界的份，由你和坟墓19'''2021#利用 jieba 模板对中文的字符串进行分词22cut = jieba.cut(text)23cut_text = ' '.join(cut) #词语之间是空格2425# 生成对象26wc = WordCloud(27 font_path='msyh.ttc', # 中文分词必须有中文字体设置28 width=1000,29 height=800,30 background_color='white',31 #mask=img_array, # 若没有该项，则生成默认图片32)3334wc.generate_from_text(cut_text) # 绘制图片35wc.to_file('wordcloud6.jpg') #保存图片 wordcloud的参数介绍 font_path : string //字体路径，需要展现什么字体就把该字体路径+后缀名写上，如：font_path = ‘黑体.ttf’ width : int (default=400) //输出的画布宽度，默认为400像素 height : int (default=200) //输出的画布高度，默认为200像素 mask : nd-array or None (default=None) //如果参数为空，则使用二维遮罩绘制词云。如果 mask 非空，设置的宽高值将被忽略，遮罩形状被 mask 取代。除全白（#FFFFFF）的部分将不会绘制，其余部分会用于绘制词云。如：bg_pic = imread(‘读取一张图片.png’)，背景图片的画布一定要设置为白色（#FFFFFF），然后显示的形状为不是白色的其他颜色。可以用ps工具将自己要显示的形状复制到一个纯白色的画布上再保存，就可以了。 background_color : color value (default=”black”) //背景颜色，如background_color=’white’,背景颜色为白色。 max_font_size : int or None (default=None) //显示的最大的字体大小 fit_words(frequencies) //根据词频生成词云 generate(text) //根据文本生成词云 generate_from_frequencies(frequencies[, …]) //根据词频生成词云 generate_from_text(text) //根据文本生成词云 to_file(filename) //输出到文件","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Python/"}]},{"title":"pip下载速度过慢解决办法","slug":"pip下载速度过慢解决办法","date":"2020-02-07T07:21:25.000Z","updated":"2020-02-18T04:09:26.994Z","comments":true,"path":"pip下载速度过慢解决办法/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/pip%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E8%BF%87%E6%85%A2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"本来利用cmd的pip命令安装需要用到的python模板的时候就因为下载速度过慢而无法忍受，尤其是最近安装词云模板的时候崩溃了。","text":"本来利用cmd的pip命令安装需要用到的python模板的时候就因为下载速度过慢而无法忍受，尤其是最近安装词云模板的时候崩溃了。 然后就搜集出了解决办法，比如： pip install wordcloud 你会发现：8kb/s 这感人的数值 如果加上一行命令，就大不同： pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 据说这是清华大学的镜像服务器，比较稳定。 这时候速度会飙升到你自己家的网速！","categories":[],"tags":[{"name":"diary","slug":"diary","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/diary/"}]},{"title":"数据处理","slug":"数据处理","date":"2020-02-06T02:59:08.000Z","updated":"2020-05-30T15:49:17.843Z","comments":true,"path":"数据处理/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/","excerpt":"","text":"JSON ( JavaScript Object Notation)json是一种超轻量级的数据交换格式 如果爬取内容为json格式, 就要用到json模板里面的 json.loads()方法, 从而将json格式的字符串还原成python的数据结构.","categories":[],"tags":[{"name":"Web_spider","slug":"Web-spider","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Web-spider/"}]},{"title":"爬取喜欢的小说","slug":"爬取小说内容","date":"2020-02-04T16:00:00.000Z","updated":"2020-02-06T03:08:14.124Z","comments":true,"path":"爬取小说内容/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/%E7%88%AC%E5%8F%96%E5%B0%8F%E8%AF%B4%E5%86%85%E5%AE%B9/","excerpt":"","text":"1import requests2from bs4 import BeautifulSoup34for i in range(2426566, 2427508):5 url = 'http://www.tianxiabachang.cn/5_5864/' + str(i) + '.html'6 headers = &#123;7 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36'8 &#125;9 response = requests.get(url, headers=headers)10 response.encoding = 'gbk'11 #需要进行两次的格式转换，先变成gbk再变成utf-8，不然会报错12 response.encoding = 'utf-8'13 # 把响应的内容扔到BeautifulSoup里，生成BeautifulSoup对象，用来解析HTML14 soup = BeautifulSoup(response.text, 'lxml')15 # 找到 id=\"content\"的标签，也就是小说文本内容16 contentsText = soup.find(id=\"content\")17 # 找到title标签18 title = soup.title19 # 获取title的文本内容，也就是去掉&lt;title&gt;20 title = str(title.string)21 with open(\"天才相师.txt\", 'a', encoding=\"utf-8\") as file:22 file.write(contentsText.text)23 print(title + \"完成！\")24 file.close()","categories":[],"tags":[{"name":"Web_spider","slug":"Web-spider","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Web-spider/"}]},{"title":"2019总结","slug":"2019总结","date":"2020-01-25T16:00:00.000Z","updated":"2020-02-07T13:08:11.675Z","comments":true,"path":"2019总结/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/2019%E6%80%BB%E7%BB%93/","excerpt":"","text":"学校生活拖拖拉拉两天了，今天才开始动手写这个总结。不知道怎么了，总觉得2019年过的过得异常的快。而当我这一刻努力回忆一些什么的时候，我发现，好像没有多少让我记得的。它们都随着风儿飘去，这一年浪花，拍在我人生的岸上，似乎并没有留下痕迹就已经消逝了，这大概又是我近乎荒废的一年吧。 今年的暑假期间我们搬了校区，我从512来到了538。说实话，心中有些不舍，毕竟都是交往了一年的好哥们说散就散了。虽然说宿舍很近随时可以聚，但总觉得少了凝聚力。我这人呢，什么都放心里。固然有些不舍，嗐~随它去吧，分分合合的，难道还是少有的事儿吗。 既然来到了新的环境，那就凑合呗。我的适应能力这么强，啥环境不能习惯。这学期我阴差阳错的当上了班上的心理委员。这职位有多闲呢，整个学期别说有个什么活动了，连个通知都没有。然后我还由于是一号床当上了寝室长。我这人，就烦一堆麻烦事。不过这两个职位也并没有给我带来什么麻烦。寝室长会议，逃了~ 班委会议，逃了~ 年级大会，逃了~ 不是我不愿意去，而是纵观大一一年来看，这些会议真的都是很没有意义，都是几句话就能解决的事，何必那么兴师动众呢。 一个学期下来，我真是水到家了。上课时的我大部分时间都花在了玩手机或是走神上。不知道为啥，就是不想听课。期末考试也只能算是勉强过关吧，反正奖学金是肯定没戏了。 写着写着突然发现自己毫无成就, 但转念一想，我也学了一些东西， 比如 ps 以及 pr 还有 python 的入门……emmm, 好吧, 只是浅显的入门。 关于她2018、2019、2020，怎么说，也是第三年了。两年的相处时间，我更加深入的了解了她的性格、脾气。两年来，从我以为我们会一直这样好下去，永远不会吵架。变成了后期的隔三岔五生次气，大多数都是彼此的想当然。异地恋的苦，大概就是所有的我以为和她以为吧。但是说起来，我毕竟也是一个男生，男人嘛，总要大度一些，哄哄哄才是正确的选择。 大二上这一个学期以来，我们总共见了五次面。虽然一直说去宜家逛逛小愿望一直落空，但也不后悔。我们两个人在一起，遛遛逛逛四处走走也是美妙极了。虽然没有什么可以值得记录的回忆，每次见面都是些生活的点点滴滴，我还是很怀念。怀念每一次我睡懒觉她催我起床的时刻，怀念每次我把她惹生气又把她哄好的过程，怀念我一本正经的胡说八道时她认真听的样子…她傻傻的爱着我，我定不能辜负她。 我想，这才是更加的贴近生活。既然认定了彼此，提前磨合磨合没有什么不好。 大事记大概是从元旦前后吧，爆发了武汉肺炎。是一种新型冠型病毒，比当年的非典厉害多了。作为一个00后，我没见证76年的唐山大地震、也不了解03年的非典，但这次的武汉肺炎算是我经历的一个大事件了。本来应该是欢天喜地的新年，但家家户户都被这场病毒的爆发而胆战心惊。商场的口罩被抢一空，没有人再愿意聚会、走亲戚。武汉封了、湖北封了、亳州封了、河南封了…就连很多村庄都已经封闭了。这时候，我才明白问题的严重性。作为一名00后，一腔热血还是有的。奈何并没有什么能力帮助这个社会，我所能做的，就是配合政府工作，不走亲戚不串门，勤洗手戴口罩，尽到一个公民应有的义务。 目前为止，感染人数倍数级增加，病毒又产生变异…但我坚信，这个民族已经传承了几千年，我们是一个坚强又必胜的民族。","categories":[],"tags":[{"name":"diary","slug":"diary","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/diary/"}]},{"title":"BeautifulSoup","slug":"BeautifulSoup","date":"2020-01-16T12:20:00.000Z","updated":"2020-01-31T08:10:24.872Z","comments":true,"path":"BeautifulSoup/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/BeautifulSoup/","excerpt":"","text":"BeautifulSoup▲ 自动将输入文档转换成 Unicode 编码， 输出文档转换成 UTF-8 编码. BeautifulSoup 类的基本元素 基本元素 说明 Tag 标签，最基本的信息组织单元, 分别用&lt;&gt;和&lt;/&gt;标明开头和结尾, 通过 soup.tag 的形式获取标签的信息 Name 标签的名字, … 的标签名字是 p ,格式 : soup.tag.name Atrributes 标签的属性，字典形式组织, 格式：tag.attrs NavigableString 标签内非属性字符串, &lt;&gt;…&lt;/&gt;中字符串, 格式：tag.string ▲ demo 1import requests2from bs4 import BeautifulSoup34r = requests.get('http://python123.io/ws/demo.html')5demo = r.text6soup = BeautifulSoup(demo, 'lxml')7print(soup.prettify()) #更为美观的输出 html 语法. 运行结果如下： 1&lt;html&gt;2 &lt;head&gt;3 &lt;title&gt;4 This is a python demo page5 &lt;/title&gt;6 &lt;/head&gt;7 &lt;body&gt;8 &lt;p class=\"title\"&gt;9 &lt;b&gt;10 The demo python introduces several python courses.11 &lt;/b&gt;12 &lt;/p&gt;13 &lt;p class=\"course\"&gt;14 Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:15 &lt;a class=\"py1\" href=\"http://www.icourse163.org/course/BIT-268001\" id=\"link1\"&gt;16 Basic Python17 &lt;/a&gt;18 and19 &lt;a class=\"py2\" href=\"http://www.icourse163.org/course/BIT-1001870001\" id=\"link2\"&gt;20 Advanced Python21 &lt;/a&gt;22 .23 &lt;/p&gt;24 &lt;/body&gt;25&lt;/html&gt; BeautifulSoup 支持的解析器 解析器 使用方法 Python标准库 BeautifulSoup(markup, ‘html.parser’) lxml HTML解析器 BeautifulSoup(markup, ‘lxml’) lxml XML解析器 BeautifulSoup(markup, ‘xml’) html5lib BeautifulSoup(markup, ‘html5lib’) lxml解析器有 HTML 和 XML 的功能, 强大且速度快, 所以我们常用的是 lxml 解析器. 用法:soup = BeautifulSoup(html, &#39;lxml&#39;) 实例: 1from bs4 import BeautifulSoup as bs23html = '''4&lt;p class=\"title\" name=\"dormouse\"&gt;&lt;b&gt;This is a demo&lt;/b&gt;&lt;/p&gt;5&lt;meta property=\"og:type\" content=\"website\"&gt;6&lt;meta property=\"og:title\" content=\"Lihao\"&gt;7&lt;meta property=\"og:url\" content=\"https:&amp;#x2F;&amp;#x2F;minewelt.github.io&amp;#x2F;index.html\"&gt;8&lt;meta property=\"og:site_name\" content=\"Lihao\"&gt;9&lt;meta property=\"og:locale\" content=\"zh-CN\"&gt;10&lt;meta name=\"twitter:card\" content=\"summary\"&gt;11'''1213soup = bs(html, 'lxml')14print(soup.p.string) 运行结果就是: This is a demo soup.p.string 的意思就是打印出 title 节点里面的字符内容 其实任何存在于 html 语法得标签都可以使用 soup.tag （tag 就是 html 语法中的标签）的方式获取, 如果同样的节点名称有多个，则只取第一个节点的内容. 获取标签的名字的方法是 soup.tag.name 获取标签的父标签的方法是 soup.tag.parent.name 内容遍历 上行遍历 for parent in soup.a.parents: 属性 说明 .parent 节点的父亲标签 .parents 节点先辈标签的迭代类型, 用于循环遍历先辈节点 下行遍历 1、 遍历儿子节点 12for child in soup.body.children:3 print(child) 2、 遍历子孙节点 12for child in soup.body.children:3 print(child) 疑问：为什么如果直接传入 html 代码的时候，要 print(soup.tag.string) 就会显示标签下的字符串, 而如果传入一个 url 的 text 文本就需要 print(tag.string) 才可以 , 因为当用 print(soup.tag.string) 的时候会报错: AttributeError: &#39;NoneType&#39; object has no attribute &#39;string&#39; 由此, 产生了一个疑问, “soup.” 加不加到底有什么区别 ? 一经思考, 发现这是一个很简单的问题, 甚至当我刚把疑问敲下来的瞬间就已经想出了问题的答案. “soup.” 加这个前缀就是为了一种索引的功能. 而我的源代码是：for child in soup.title.children: 这样，就是已经令 child 代替了 soup.title.children 就不需要再纠结了… 方法选择器find_all()(是不是让你想到了正则表达式里面的findall(), 如果忘了快去复习一下吧~) API: find_all(name, attrs, recursive, text, **kwargs) name : 根据节点名查询元素 attrs : 传入属性来查询元素 text : 匹配节点的文本，传入的形式可以是字符串也可以是正则表达式对象. CSS 选择器对比方法选择器， 我觉得还是CSS选择器更加方便快捷简单易懂. 说到 CSS选择器， 不得不说到 select() 方法. ▲ select() 返回的是列表类型 html 源码奉上~ 12html &#x3D; &quot;&quot;&quot;3&lt;html&gt;4 &lt;head&gt;5 &lt;title&gt;The Dormouse&#39;s story&lt;&#x2F;title&gt;6 &lt;&#x2F;head&gt;7 &lt;body&gt;8 &lt;p class&#x3D;&quot;title&quot; name&#x3D;&quot;dromouse&quot;&gt;9 &lt;b&gt;The Dormouse&#39;s story&lt;&#x2F;b&gt;10 &lt;&#x2F;p&gt;11 &lt;p class&#x3D;&quot;story&quot;&gt;12 Once upon a time there were three little sisters; and their names were13 &lt;a class&#x3D;&quot;mysis&quot; href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;elsie&quot; id&#x3D;&quot;link1&quot;&gt;14 &lt;b&gt;the first b tag&lt;b&gt;15 Elsie16 &lt;&#x2F;a&gt;,17 &lt;a class&#x3D;&quot;mysis&quot; href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;lacie&quot; id&#x3D;&quot;link2&quot; myname&#x3D;&quot;kong&quot;&gt;18 Lacie19 &lt;&#x2F;a&gt;and20 &lt;a class&#x3D;&quot;mysis&quot; href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;tillie&quot; id&#x3D;&quot;link3&quot;&gt;21 Tillie22 &lt;&#x2F;a&gt;;and they lived at the bottom of a well.23 &lt;&#x2F;p&gt;24 &lt;p class&#x3D;&quot;story&quot;&gt;25 myStory26 &lt;a&gt;the end a tag&lt;&#x2F;a&gt;27 &lt;&#x2F;p&gt;28 &lt;a&gt;the p tag sibling&lt;&#x2F;a&gt;29 &lt;&#x2F;body&gt;30&lt;&#x2F;html&gt; 1、通过标签选择 选择所有title标签 soup.select(“title”) 选择所有p标签中的第三个标签 soup.select(“p:nth-of-type(3)”) 相当于soup.select(p)[2] 选择body标签下的所有a标签 soup.select(“body a”) 选择body标签下的直接a子标签 soup.select(“body &gt; a”) 选择id=link1后的所有兄弟节点标签 soup.select(“#link1 ~ .mysis”) 选择id=link1后的下一个兄弟节点标签 soup.select(“#link1 + .mysis”) 2、通过类名查找 选择a标签，其类属性为mysis的标签 soup.select(“a.mysis”) 3、通过id查找 选择a标签，其id属性为link1的标签 soup.select(“a#link1”) 4、通过属性查找，当然也适用于class 选择a标签，其属性中存在myname的所有标签 soup.select(“a[myname]”) 选择a标签，其属性href=http://example.com/lacie的所有标签 soup.select(“a[href=’http://example.com/lacie&#39;]&quot;) 选择a标签，其href属性以http开头 soup.select(‘a[href^=”http”]’) 选择a标签，其href属性以lacie结尾 soup.select(‘a[href$=”lacie”]’) 选择a标签，其href属性包含“.com” soup.select(‘a[href*=”.com”]’) 从html中排除某标签，此时soup中不再有script标签 [s.extract() for s in soup(‘script’)] 排除多个 [s.extract() for s in soup([‘script’,’fram’]","categories":[],"tags":[]},{"title":"pyquery","slug":"pyquery","date":"2020-01-15T13:37:56.000Z","updated":"2020-01-31T08:10:41.768Z","comments":true,"path":"pyquery/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/pyquery/","excerpt":"","text":"初始化 pyquery 的时候不仅可以传入 HTML 文档， 还可以直接传入传入 URL 和 本地文件. 1、 初始化 html字符 1from pyquery import PyQuery as pq23html = '''4&lt;div id=\"error-notice-container\"&gt;5 &lt;div id=\"error-notice\" class=\"notice-hide\" role=\"alert\"&gt;6 &lt;span id=\"error-notice-icon\"&gt;&lt;/span&gt;7 &lt;span id=\"error-notice-msg\"&gt;&lt;/span&gt;8 &lt;span id=\"error-notice-link\" class=\"ripple\" tabindex=\"0\" role=\"button\"&gt;&lt;/span&gt;9 &lt;/div&gt;10 &lt;/div&gt;11'''1213doc = pq(html)14print(doc('span')) 这样, 就把 div 节点的内容打印出来了. 1&lt;span id&#x3D;&quot;error-notice-icon&quot;&#x2F;&gt;2 &lt;span id&#x3D;&quot;error-notice-msg&quot;&#x2F;&gt;3 &lt;span id&#x3D;&quot;error-notice-link&quot; class&#x3D;&quot;ripple&quot; tabindex&#x3D;&quot;0&quot; role&#x3D;&quot;button&quot;&#x2F;&gt; URL 初始化 比如 1from pyquery import PyQuery as pq23headers = &#123;4 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'5 &#125;6doc = pq(url = 'https://maoyan.com/board/4?offset=0', headers=headers)7print(doc('title')) 结果如下: &lt;title&gt;TOP100榜 - 猫眼电影 - 一网打尽好电影&lt;/title&gt; 文件初始化 12from pyquery import PyQuery as pq3 4doc = pq(filename = 'demo.html')5print(doc('li')) 这就要求本地有一个名为 demo.html 的文件夹，内容是 html 代码. 2 、基本 CSS 选择器1from pyquery import PyQuery as pq23html = '''4&lt;div id=\"error-notice-container\"&gt;5 &lt;div id=\"error-notice\" class=\"notice-hide\" role=\"alert\"&gt;6 &lt;span id=\"error-notice-icon\"&gt;&lt;/span&gt;7 &lt;span id=\"error-notice-msg\"&gt;&lt;/span&gt;8 &lt;span id=\"error-notice-link\" class=\"ripple\" tabindex=\"0\" role=\"button\"&gt;&lt;/span&gt;9 &lt;/div&gt;10 &lt;/div&gt;11'''1213doc = pq(html)14print(doc('#error-notice-container .notice-hide span')) 结果如下 1&lt;span id&#x3D;&quot;error-notice-icon&quot;&#x2F;&gt;2 &lt;span id&#x3D;&quot;error-notice-msg&quot;&#x2F;&gt;3 &lt;span id&#x3D;&quot;error-notice-link&quot; class&#x3D;&quot;ripple&quot; tabindex&#x3D;&quot;0&quot; role&#x3D;&quot;button&quot;&#x2F;&gt; 在初始化PyQuery 对象之后， 我们传入了一个CSS选择器 #error-notice-container .notice-hide span 意思就是先选取 id 为 error-notice-container 的节点, 然后选取内部的 class 为 notice-hide 的节点内部所有的 span 节点.(好吧，读起来很绕口，根据代码理解更好) 3、查找节点·1","categories":[],"tags":[]},{"title":"Ps[图片转换成Gif格式]","slug":"Ps-图片转换成Gif格式","date":"2020-01-09T05:36:25.000Z","updated":"2020-01-09T05:57:40.779Z","comments":true,"path":"Ps-图片转换成Gif格式/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/Ps-%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E6%88%90Gif%E6%A0%BC%E5%BC%8F/","excerpt":"","text":"表情包横行的今天，一言不合对方就丢来一个Gif动图. 这让我们有了一个初步的认识， “ 哦，原来 Gif 是动图的标志. 是的，gif是一种比较常用的动态图像格式，多数是由多帧图像合并在一起组成的gif动画，当然也有单帧的。gif文件几乎可以使用任何格式的gif播放器打开，比如常用的flash、看图软件、gif动画制作软件等等。 现在我们就要尝试把一张不是动图的图片转换成 Gif 格式. 想到转换，我电脑里现存的图片处理软件只有 Photoshop , 回想起之前做好图片之后的 “ 导出为 ” ， 我豁然开朗. 一顿操作，发现…好像不行 然后百度发现可以先导出为 Web 的格式，然后再打开之后保存图片即可.如下：","categories":[],"tags":[{"name":"photoshop","slug":"photoshop","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/photoshop/"}]},{"title":"豆瓣top250","slug":"豆瓣top250","date":"2020-01-09T04:34:08.000Z","updated":"2020-02-06T03:08:12.428Z","comments":true,"path":"豆瓣top250/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/%E8%B1%86%E7%93%A3top250/","excerpt":"","text":"1import re2import requests3import time4import json56for i in range(0,226,25):7 url = 'https://movie.douban.com/top250?start=' + str(i) + '&amp;filter='8 headers = &#123;9 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'10 &#125;1112 response = requests.get(url, headers=headers)13 html = response.text1415 result = re.findall('class=\"info\".*?title.*?&gt;(.*?)&lt;',html, re.S)16 for results in result:17 with open('result.txt','a', encoding='utf-8') as f:18 f.write(json.dumps(results, ensure_ascii=False) + '\\n')1920 time.sleep(1) 其它的模板通过前面的学习已经知道他们的作用了, 但此刻的 json 却不知道是从哪里冒出来的. 我们知道，我们获得的 result 是 list 类型, 而列表是不能直接写入文件中的, 那我们只好进行转化, 使列表变得有序化. python 提供了一种方法, json 中的 dumps() 方法可以使其序列化, 而dumps()里面有一个参数是 ensure_ascii , 默认是 True ，如果改成 False 编码方式就可以保证输出中文而不是 Unicode 编码。","categories":[],"tags":[{"name":"Web_spider","slug":"Web-spider","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Web-spider/"}]},{"title":"Web_spider[正则表达式]","slug":"Web-spider-正则表达式","date":"2020-01-08T06:54:30.000Z","updated":"2020-01-31T08:11:23.678Z","comments":true,"path":"Web-spider-正则表达式/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/Web-spider-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"常用的匹配规则 模式 描述 \\w 匹配字母、数字及下划线 \\d 匹配任意数字（0-9） \\s 匹配任意空白字符 \\n 匹配一个换行符 \\t 匹配一个制表符 ^ 匹配一行字符串的开头 $ 匹配一行字符串的结尾 . 匹配任意字符（除换行符） * 匹配0个或多个表达式 ？ 匹配0个或一个前面的正则表达式定义的片段，非贪婪方式 match() : 从头开始匹配 作为一个常用的匹配方式， 向它传入要匹配的字符串以及正则表达式，就可以检测这个正则表达式是否匹配字符串.它的第一个参数要传入正则表达式, 第二个参数要传入字符串. 1import re23content = 'hello cike 567'4result = re.match('^hello\\s\\w&#123;4&#125;\\s\\d&#123;3&#125;$', content)56print(result)7print(result.group()) 如果匹配成功就会返回结果，如果失败就会返回 None. 运行结果如下： &lt;re.Match object; span=(0, 14), match=&#39;hello cike 567&#39;&gt;hello cike 567 如果想要匹配目标, 比如 567 ： 1import re23content = 'hello cike 567'4result = re.match('^hello\\s\\w&#123;4&#125;\\s(\\d+)', content)56print(result.group(1)) 运行结果: 567 这样我们就可以通过一个括号把想要的部分括起来, 然后通过 group(1) 访问第一个括号里面的内容. 通用匹配如果要一个一个的匹配, 我们倒还不如不用正则表达式, 那么有没有一种通用的匹配方法呢？ 当然有了. 贪婪 在 python 中， 把 “ .* “ 当作通用的匹配方式（当然，除了换行符外）在最后记得加上一个 $ 结尾符号即可， 不然， 贪婪的 .* 会把你后面所有的字符吃掉 (当然，也是除了换行符外) 非贪婪 .*? ： 相对于想要匹配尽量多字符的 .* ， .*? 却恰恰相反，它匹配的是尽量少的字符 1import re23content = 'hello cike 567'4result = re.match('^he.*?(\\d+)$', content)56print(result.group(1)) 运行结果如下： 567 猜一下如果我们不加 ？ , 会是什么结果. 7 因为 .* 是匹配尽量多的字符, 所以由于它的贪婪, 只给 \\d+ 留下了一个数字 7, 当然这也是因为 \\d+ 是匹配一个或多个数字的原因使得可以进行这样的分配. 修饰符前面我们说过， 通用符可以包括任意的字符, 但是不能包括换行符， 那么如果想要再包括换行符，就要加上 re.S 比如: 1import re23content = '''hello4cike 5675'''6result = re.match('^he.*?(\\d+)$', content, re.S)7print(result.group(1)) 运行结果： 567 常见的修饰符如下: 修饰符 描述 re.I 使匹配对大小写不敏感 re.L 使本地化识别匹配 re.M 多行匹配 re.S 使.匹配包括行在内的所有字符 re.U 根据Unicode字符集解析字符 道理我们都懂，but… 当我们的字符串里面包含有 “ . “ 又该怎么办呢？ 这时候我们就需要转义.和c语言一样，在需要转义的字符前面加上 \\ 比如： result = &#39;www\\.baidu\\.com&#39; search() ： 扫描整个字符串，返回第一个匹配成功的结果实例感受一下： 1import re23html = '''4&lt;span class=\"glyphicon glyphicon-user\"&gt;&lt;/span&gt;5&lt;span class=\"glyphicon-class\"&gt;消息通知(6&lt;span style=\"color: #ed5736; font-weight: bold\" id=\"xxtz\" &gt;0&lt;/span&gt;&amp;nbsp;)7&lt;/span&gt;8 '''9result = re.search('-class.*?&gt;(.*?)\\(', html, re.S)10print(result.group(1)) 运行结果如下: 消息通知 没有了繁琐的内容，我们可以直接快速的找到自己想要的内容. 但是有一个不得不提，search() 方法只能获取第一个符合要求的， 但是如果我们想要获取一组数据, search 方法就显得有些心有余而力不足了.我们就不得不引入 findall() findall() : 搜索整个字符串， 返回匹配正则表达式的所有内容.1import re23html = '''4&lt;a href=\"/jsxsd/xsxkjg/xsxkkb\" target=\"kbFrame\"&gt;选课课表&lt;/a&gt;5&lt;/li&gt; 6 7&lt;li id=\"xkjgLi\"&gt;8&lt;a href=\"/jsxsd/xsxkjg/comeXkjglb\" target=\"kbFrame\"&gt;选课结果查看及退选&lt;/a&gt; 9&lt;/li&gt;10 11&lt;li id=\"xkrzLi\"&gt;12&lt;a href=\"/jsxsd/xsxkjg/getTkrzList\" target=\"kbFrame\"&gt;退课日志查看&lt;/a&gt;13&lt;/li&gt;14&lt;!-- 15&lt;li id=\"xktkLi\"&gt;16&lt;a href=\"/jsxsd/xsxkjg/comeXkjglb\" target=\"kbFrame\"&gt;课程停开列表&lt;/a&gt; 17&lt;/li&gt;18 '''19result = re.findall('target.*?&gt;(.*?)&lt;', html, re.S)20for i in range(4):21 print(result[i]) 输出结果如下: 12选课课表3选课结果查看及退选4退课日志查看5课程停开列表 乱入： 不知到现在你是否和我一样有一个疑问， 那就是为什么在这里用了列表的访问方式 []因为用 type() 方法检查之后发现 result 的类型就是 list 类型的. 而对于之前的 match 和 search方法都是返回一个内容， 故可以用 group()但是 因为 findall() 方法是输出多个内容故不能再用 group 方法.","categories":[],"tags":[{"name":"Web_spider","slug":"Web-spider","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Web-spider/"}]},{"title":"有道翻译","slug":"Web-spider-[有道翻译]","date":"2020-01-07T05:37:53.000Z","updated":"2020-01-31T08:14:03.022Z","comments":true,"path":"Web-spider-[有道翻译]/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/Web-spider-[%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91]/","excerpt":"","text":"1import urllib.request2import urllib.parse3import json45while True:6 content = input(\"请输入待翻译的内容(输入0退出程序):\")7 if content == \"0\": break8 url = 'http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule'910 data = &#123;&#125;11 data['i'] = content12 data['from'] = 'AUTO'13 data['to'] = 'AUTO'14 data['smartresult'] = 'dict'15 data['client'] = 'fanyideskweb'16 data['salt'] = '15780286531233'17 data['sign'] = 'fea785927e5dc89ee5d05f9b5d4035b3'18 data['ts'] = '1578028653123'19 data['bv'] = '42160534cfa82a6884077598362bbc9d'20 data['doctype'] = 'json'21 data['version'] = '2.1'22 data['keyfrom'] = 'fanyi.web'23 data['action'] = 'FY_BY_REALTlME'2425 data = urllib.parse.urlencode(data).encode('utf-8')2627 response = urllib.request.urlopen(url, data) #新增了data参数.28 html = response.read().decode('utf-8')29 result = json.loads(html)30 print(result[\"translateResult\"][0][0][\"tgt\"]) 在 python 中，json结构 和 字典结构的形式很相似,上面的 “html” 类型就是 json （在Data中的 “doctype” 可见）. 如果直接输出 html (比如输入的是”love”), 结果是: {&quot;type&quot;:&quot;EN2ZH_CN&quot;,&quot;errorCode&quot;:0,&quot;elapsedTime&quot;:1,&quot;translateResult&quot;:[[{&quot;src&quot;:&quot;love&quot;,&quot;tgt&quot;:&quot;爱&quot;}]]} python中提供的转换方式是 json.loads() 这样, result 就变成了字典类型, 我们就可以通过访问字典里面的键访问翻译的内容.","categories":[],"tags":[{"name":"Web_spider","slug":"Web-spider","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Web-spider/"}]},{"title":"Web_spider[解析链接]","slug":"Web-spider-解析链接","date":"2020-01-06T15:25:33.000Z","updated":"2020-01-31T08:13:58.089Z","comments":true,"path":"Web-spider-解析链接/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/Web-spider-%E8%A7%A3%E6%9E%90%E9%93%BE%E6%8E%A5/","excerpt":"","text":"urllib 的 parse 模板定义了处理 URL 的标准接口, 例如实现 url 各部分的抽取， 合并， 以及链接的转换. urlparse1from urllib.parse import urlparse23result = urlparse('http://www.baidu.com/index.html')4print(type(result), '\\n', result) 结果如下 1&lt;class &#39;urllib.parse.ParseResult&#39;&gt; 2 ParseResult(scheme&#x3D;&#39;http&#39;, netloc&#x3D;&#39;www.baidu.com&#39;, path&#x3D;&#39;&#x2F;index.html&#39;, params&#x3D;&#39;&#39;, query&#x3D;&#39;&#39;, fragment&#x3D;&#39;&#39;) 看以看出， 返回的是一个 ParseResult 类型的对象. 包含了六个部分， scheme, netloc, path, params, fragment. scheme : 协议 netloc : 域名 path : 访问路径","categories":[],"tags":[{"name":"Web_spider","slug":"Web-spider","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Web-spider/"}]},{"title":"Web_spider[异常处理]","slug":"Web-spider-异常处理","date":"2020-01-03T06:10:18.000Z","updated":"2020-01-31T08:11:45.337Z","comments":true,"path":"Web-spider-异常处理/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/Web-spider-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/","excerpt":"","text":"了解了发送请求的过程之后, 我们不得不产生疑问： 天哪！在网络环境不好的情况下, 那我的爬虫脚本岂不是要终止运行了 ？ 程序很有可能在一些非人为因素情况下因报错而终止运行, 所以异常处理很重要. urllib 中的 error 模板定义了 request 模块产生的异常. URLErrorrURLError 来自于 urllib 的 error 模块, 它有一个属性 reason ，可以返回错误的原因. 比如说… 1from urllib import error, request23try:4 response = request.urlopen('https://minewelt.cn/index.htm')5except error.URLError as e:6 print(e.reason) 我们打开了一个不存在的页面, 程序自然会报错, 但我们用 URLError 这个异常， 就会出现 Not Found 我们亲切的称呼它为 404. HTTPError它是 URLError 的子类, 专门用来处理 HTTP 请求错误. code ： 返回 HTTP 状态码. reason ： 同 URLError. headers ： 返回请求头. 实例: 1from urllib import error, request23try:4 response = request.urlopen('https://minewelt.cn/index.htm')5except error.HTTPError as e:6 print(e.reason,'\\n', e.code,'\\n', e.headers) 运行结果如下： 1Not Found 2 404 3 Content-Type: text&#x2F;html; charset&#x3D;utf-84Server: GitHub.com5ETag: &quot;5cc3539e-247b&quot;6Access-Control-Allow-Origin: *7Content-Security-Policy: default-src &#39;none&#39;; style-src &#39;unsafe-inline&#39;; img-src data:; connect-src &#39;self&#39;8X-Proxy-Cache: MISS9X-GitHub-Request-Id: 5B24:5635:1BC6492:1D88265:5E141BCC10Content-Length: 933911Accept-Ranges: bytes12Date: Tue, 07 Jan 2020 05:58:17 GMT13Via: 1.1 varnish14Age: 55715Connection: close16X-Served-By: cache-tyo19943-TYO17X-Cache: HIT18X-Cache-Hits: 119X-Timer: S1578376698.636971,VS0,VE120Vary: Accept-Encoding21X-Fastly-Request-ID: af139429859815307ec6c7a9822fc56d4967bee0 既然 HTTPError 是 URLError 的子类， 所以我们不妨先检查子类， 再检查父类. 这样可以提高效率. from urllib import request, error try: response = request.urlopen(&apos;https://minewelt.cn/index.htm&apos;) except error.HTTPError as e: print(e.reason,&apos;\\n&apos;, e.code,&apos;\\n&apos;, e.headers) except error.URLError as e: print(e.reason) else: print(&apos;Request Successfully&apos;)","categories":[],"tags":[{"name":"Web_spider","slug":"Web-spider","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Web-spider/"}]},{"title":"Web spider[打开链接]]","slug":"Web-spider-请求响应","date":"2020-01-01T03:49:12.000Z","updated":"2020-01-31T08:13:59.109Z","comments":true,"path":"Web-spider-请求响应/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/Web-spider-%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/","excerpt":"","text":"urllib 内置四个模板 : request : HTTP 请求模板, 可以用来模拟发送请求. error : 异常处理模块, 用以保证程序不会异常中断. parse : 工具模板, 提供了很多的 URL 处理方法.(拆分, 解析, 合并等) robotparser : 主要识别网站的 robots.txt 文件, 然后判断哪些网站可以爬取. urlopen()在python的官方文档中, urlopen() 函数的 API ： urllib.request.urlopen(url, data=None, [time,]*, cafile=None, capath=None, cadefault=False, context=None) 首先我们看看它的强大之处. 1import urllib.request23response = urllib.request.urlopen('https://www.baidu.com')4print(response.read().decode('utf-8')) 运行结果如下: 1&lt;html&gt;2&lt;head&gt;3 &lt;script&gt;4 location.replace(location.href.replace(\"https://\",\"http://\"));5 &lt;/script&gt;6&lt;/head&gt;7&lt;body&gt;8 &lt;noscript&gt;&lt;meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com/\"&gt;&lt;/noscript&gt;9&lt;/body&gt;10&lt;/html&gt; 仅仅两行代码, 便完成了对 pyhton 代码的抓取, 得到了网页的源码之后, 我们可以得到任何想要的信息 : 链接、图片地址、文本信息… data data 参数是可选的， urlopen 的默认的 data 方式是 GET ，给 data 赋值之后它的请求方式就变成了 POST 形式. 需要注意的是, 在 python 的官方文档中, 指定 data 这个参数的形式必须是 urlencode() 的形式, 所以我们需要用到 urllib.parse 模板里面的 urllib.parse.urlencode() 方法. 1import urllib.request2import urllib.parse34data = &#123;&#125;5data['word'] = 'hello'6data = urllib.parse.urlencode(data).encode('utf-8')7response = urllib.request.urlopen('http://httpbin.org/post', data = data) #此处的url是用来测试POST请求的链接8print(response.read()) 运行结果如下: 1&#123;2\"args\" : &#123;&#125;,3\"data\" : \"\",4\"files\" : &#123;&#125;,5\"form\" : &#123;6\"word\" : \"hello\" #我们传递的参数出现在了 form 中，表明是模拟了表单的提交方式是以 POST 形式传输数据7&#125;,8\"headers\" : &#123;9\"Accept-Encoding\" : \"identity\",10\"Content-Length\" : \"10\",11\"Content-Type\" : \"application/x-www-form-urlencode\",12\"Host\" : \"httpbin.org\",13\"User-Agent\" : \"Python-urllib/3.8\"14&#125;,15\"json\" : null,16\"origin\" : \"123.124.23.253\",17\"url\" : \"http://httpbin.org/post\"18&#125; timeout timeout 参数用于设置超时时间，单位是秒, 如果超过这个设定的时间， 就会抛出异常. 其他参数 详情请移步: https://docs.python.org/3/library/urllib.request.html Request对于简单的请求, urlopen 可以胜任, 但是不足以构成完整的请求. 如果要添加 Headers 等信息， 就要更强大的 Request 类. 实例感受一下: 1import urllib.request23request = urllib.request.Request('http://python.org')4response = urllib.request.urlopen(request)5print(response.read().decode('utf-8')) 注意, 这里我们依然是用 urlopen 打开， 不同的是， 其参数不再是 url ，而是 Request 对象. Request 的参数构造： urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None) headers : 是一个字典, 它就是请求头, 添加请求的最常用方法就是 通过修改 User—Agent 来伪装浏览器 , 默认的 Python-urllib.（直接 copy 源码中的 User-Agent ） origin_req_host : 指的是请求方的 host 名称或者 ip地址. unverifiable : 是用来表示请求是否无法验证, 默认是False. method : 是一个字符串, 指示请求的方法, 比如 GET，POST 和 PUT. 高级用法如果我们需要功能更高级 ( 比如Cookies处理， 代理设置 ) 的请求方式, 就要使用 Handler. https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler requests相对于 urlpoen 的含糊不清， 我更喜欢 requests 的简单直接。它可以指明请求方式（POST还是GET），可以进行代理设置，Cookies 设置，添加 headers . GET 添加 headers 现如今，很多网页都禁止爬取，所以有必要添加 headers 来模拟用户访问. requests.get(url, headers = headers) 具体用法和 urlopen 一样， 这里就不再复述了. 抓取二进制数据 其实，图片，音频，视频这些文件都是二进制代码，由于有特殊的保存方式和解码方式所以才会产生不同的结果.所以，如果我们想要获取他们，就要抓取二进制代码. 代理设置 对于很多网站, 在你测试的时候请求几次之后，能获取正常内容，一旦开始大规模爬取, 网页就会弹出验证页面. 或者禁止你的 ip 访问权限.这时候我们就要选用不同的代理. 而与代理设置有关的参数就是 proxies. 1import requests23url = 'http://www.baidu.com' 4proxies = &#123;'http':'http://183.207.224.43:80','http':'http://180.97.34.35:80'&#125;56requests.get(url, proxies=proxies) 当然，我们有需要的话，可以同时把 headers 也塞进去.","categories":[],"tags":[{"name":"Web_spider","slug":"Web-spider","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Web-spider/"}]},{"title":"Python的魔法棒","slug":"Python的魔法棒","date":"2019-12-31T12:41:54.000Z","updated":"2020-01-31T08:10:22.262Z","comments":true,"path":"Python的魔法棒/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/Python%E7%9A%84%E9%AD%94%E6%B3%95%E6%A3%92/","excerpt":"","text":"还记的第一次见到 “init” 的心情吗？实在不知道这个拥有双下横线的到底是什么东西. 一通百度加谷歌, 发现其实就是 python 中的魔法方法. What’s the python’s magic methods ?魔法方法是python的内置方法，几乎每一个魔法方法都有一个对应的内置函数，或者运算符,它是面向对象的一切. init“init“ 是什么呢？其实它就是一个构造器， 当你创建一个类的实例的时候， 调用 “init“ 是为了对这个实例进行初始化赋值.就像是类的固有属性. 比如，定义一个矩形类，需要有实例化的时候长和宽两个参数. 1class Rectangle:2 def __init__(self, x, y):3 self.x = x4 self.y = y5 #self.x是类实例化之后的实例对象的一个局部变量, 而 x 则是传入的参数6 def getPeri(self):7 return (self.x + self.y) * 2 上面的程序运行结果如下： 12&gt;&gt;&gt;rect = Rectangle(3, 4)3&gt;&gt;&gt;rect.getPeri()414 还需要提出的是，init方法是没有返回值的, 比如说: 1class Test():2 def __init__(self, str):3 self.str = str4 return str 在 python_sell 中: &gt;&gt;&gt; words = Test(&quot;我才是熬夜冠军哈哈哈&quot;) TypeError: __init__() should return None, not &#39;str&#39; 而知道了init 之后，我们再去接触其它的魔法方法就不会再云里雾里了. str 和 repr先上代码： 1&gt;&gt;&gt; class A:2 def __init__(self, name):3 self.name = name4 def __str__(self):5 return self.name6 7&gt;&gt;&gt; a = A(\"Tom\")8&gt;&gt;&gt; print(a)9Tom10&gt;&gt;&gt; a11&lt;__main__.A object at 0x03B9E628&gt; #这次打印出来的是 a 的地址. 其实, 当使用方法 print 的时候, 默认会调用 str 方法, 从而将其字符串返回. 如果直接敲 a 呢, 那就不会调用 str 方法的, 从而显示出了 str 的地址. 为了能敲出实例对象就能返回信息, 我们要用 repr 方法. 12&gt;&gt;&gt; class B:3 def __init__(self, name):4 self.name = name5 def __repr__(self):6 return self.name7 8&gt;&gt;&gt; b = B(\"Jake\")9&gt;&gt;&gt; print(a)10Jake11&gt;&gt;&gt; a12Jake","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Python/"}]},{"title":"记python生成exe程序","slug":"记python生成exe程序","date":"2019-12-29T09:06:05.000Z","updated":"2020-01-03T06:12:14.981Z","comments":true,"path":"记python生成exe程序/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/%E8%AE%B0python%E7%94%9F%E6%88%90exe%E7%A8%8B%E5%BA%8F/","excerpt":"","text":"1、安装 PyInstaller 要说把 python 代码打包成 exe 可执行文件， 那所利用的工具非 PyInstaller 莫属了. pip install pyinstaller 打开 cmd ，一条命令搞定. 2、使用 PyInstaller 在你想要打包的程序(比如test.py)的同目录下， 打开 cmd， 也是一条命令 ： pyinstaller test.py 然后会看到新增加了两个目录build和dist，dist下面的文件就是可以发布的可执行文件，对于上面的命令你会发现dist目录下面有一堆文件，各种都动态库文件和myscrip可执行文件。有时这样感觉比较麻烦，需要打包dist下面的所有东西才能发布，万一丢掉一个动态库就无法运行了. 有什么好的解决办法吗？ 当然有了 ！ pyinstaller -F test.py 这样，会发现dist文件夹下有一个名为 test 的 exe 类型的程序. 至于其他的文件不想要就删除了吧…. 搞定~","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Python/"}]},{"title":"self到底是什么","slug":"self到底是什么","date":"2019-12-28T08:05:04.000Z","updated":"2020-01-03T06:12:42.672Z","comments":true,"path":"self到底是什么/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/self%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/","excerpt":"","text":"最近在学习类和对象的时候，类中定义的一个函数总是有一个参数是self,它并没有被赋值,它到底是干啥的？？？ 在我们尝试搞清楚self之前, 我们应该搞清楚类与对象的概念 对象对象=属性+方法 对象不一定非要在类中,将对象放在类中只是为了实现批量的 “生产”. 这样，我们就定义了一个类对象. 因此, 对象无处不在, 类就是类对象, 函数也是对象… 类正所谓, 物以类聚，人以群分. 类就是一些具有共同特征的一个组合, 是方法和属性的封装, 是有一定的特有属性（静态的、动态的）. 举个简单的例子： 12class People: #python中的类名约定以大写字母开头，以示与函数名的区分3 #属性（其实就是一些变量）4 legs = 25 arms = 26 mouth = 17 appearance = [\"ugly\", \"beautiful\"]8 color = [\"white\", \"black\", \"yellow\"]9 #方法（其实就是一个个的函数）10 def eat(self):11 print(\"人是铁饭是钢,一顿不吃饿得慌!\")12 def drink(self):13 print(\"据说人一直不喝水只能坚持3天...\")14 def sleep(self):15 print(\"睡觉喽o(*￣▽￣*)ブ\") 这样，我们就定义了一个名为People的类，这个类有自己特有的的属性和方法： 有两条腿、两个胳膊、一个嘴… 它也具有一些动态的特性: 睡觉、吃饭、喝水… 实例对象12&gt;&gt;&gt; p = People() 见证伟大的时刻到了: 我们就创建了一个名为 p 的实例对象 !!! 当然, 我们也可以不给它命名, 直接用下面的方法也同样创建了一个实例对象， 只不过…我们还没有给它上户口. 12&gt;&gt;&gt; People() 实例对象被创建之后, 我们就可以尽情的享用它内部的方法 （函数） 了. 好了, 有了这些概念, 我们就可以放心大胆的回答 self 的用法了. self 是什么？经过例子我们大概可以知道 : 类中的方法与普通函数只有一个区别——即它们除了用户所给他设定的函数之外, 还有一个额外的第一个参数, 但是你不需要为这个参数赋值, python 会自动帮其赋值. self 是固定的吗？虽然这个参数的名字不一定非要是 self , 但是这已经成为了 python 中约定俗成的标准. 对, 就是这样, 不要你觉得, 我只要我觉得. 我可以不加 self 吗?一般情况下, 当然可以了, 前提是如果你不想看到 TypeError: a() takes 0 positional arguments but 1 was given 的话. 即使一个方法中没有任何参数, 仍需有 self. 其实非要说的话, 如果定义和调用的时候不传递类实例就可以… 12&gt;&gt;&gt;class Test:3&gt;&gt;&gt; def p():4&gt;&gt;&gt; print(__class__)5&gt;&gt;&gt;6&gt;&gt;&gt;Test.p()7&gt;&gt;&gt;&lt;class '__main__.Test'&gt; emmmm，我怎么觉得对象加上self.之后就能在一个类中互通了…","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Python/"}]},{"title":"Web spider[引子]","slug":"Web-spider","date":"2019-12-26T03:00:05.000Z","updated":"2020-01-03T06:10:56.620Z","comments":true,"path":"Web-spider/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/Web-spider/","excerpt":"","text":"框架1.发起请求： 通过HTTP库向目标站点发起请求，即发送一个Request，请求可以包含额外的headers、data等信息，然后等待服务器响应。这个请求的过程就像我们打开浏览器，在浏览器地址栏输入网址：www.baidu.com，然后点击回车。这个过程其实就相当于浏览器作为一个浏览的客户端，向服务器端发送了一次请求。 2.获取响应内容： 如果服务器能正常响应，我们会得到一个Response，Response的内容便是所要获取的内容，类型可能有HTML、Json字符串，二进制数据(图片，视频等）等类型。这个过程就是服务器接收客户端的请求，进过解析发送给浏览器的网页HTML文件。 3.解析内容： 得到的内容可能是HTML，可以使用正则表达式，网页解析库进行解析。也可能是Json，可以直接转为Json对象解析。可能是二进制数据，可以做保存或者进一步处理。这一步相当于浏览器把服务器端的文件获取到本地，再进行解释并且展现出来。 4.保存数据： 保存的方式可以是把数据存为文本，也可以把数据保存到数据库，或者保存为特定的jpg，mp4 等格式的文件。这就相当于我们在浏览网页时，下载了网页上的图片或者视频。 互联网就是一个蜘蛛网，每一个结点都是一个域名，编写一个蜘蛛，爬来爬去，爬取有用的内容.","categories":[],"tags":[{"name":"Web_spider","slug":"Web-spider","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Web-spider/"}]},{"title":"python杂记","slug":"python杂记","date":"2019-12-19T15:25:40.000Z","updated":"2020-02-06T03:08:13.345Z","comments":true,"path":"python杂记/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/python%E6%9D%82%E8%AE%B0/","excerpt":"","text":"写在前面最近开始接触 python, 越学习越发现它的强大和简洁.也越深刻的体会到为什么别人说 “人生苦短, 我学python”. python 是一门很强大的语言,希望能够在接下来的时间里, 能够找到我来打开这个世界的方式. 基础知识四个内置数据结构：列表、元组、字典、集合（80%）1、列表(list)：有序的可变的对象集合列表是可变的，可以把列表类似于数组的概念，不同的是，python中的列表是动态的，会根据你的需要来动态的收缩和扩展。 另外，列表是异构的，即不需要声明储存对象的类型，甚至可以在一个列表中混合不同类型的对象。 对象 索引值 对象2 2 对象1 1 对象0 0 操作应用： 表达式 结果说明 lst * n 把lst列表重复n次 lst[n1:n2] 将索引值n1，n2对应的内容取出，组成另一个列表 del lst[n1:n2] 删除索引值n1到n2之间的内容 lst[n1:n2] = n 把n1到n2之间的元素设置为n lst.append(x) 将 x 视为一个元素，附加到列表末尾 lst.extend(x) 将 x 中的所有元素附加到列表后面 lst.sort() 将列表加以排序 lst.remove(x) 删除列表中第一个出现的x 下面展示的是 append 和 extend 的区别： 1&gt;&gt;&gt;lst = [1,2,3]2&gt;&gt;&gt;ext = [5,5,5]3&gt;&gt;&gt;lst.append(ext)4&gt;&gt;&gt;lst5[1,2,3,[5,5,5]6&gt;&gt;&gt;lst = [1,2,3]7&gt;&gt;&gt;lst.extend(ext)8&gt;&gt;&gt;lst9[1,2,3,5,5,5] 2、元组(tuple)：有序的不可变的对象集合因为元组的不可变特性，通常把元组想象成一个常量列表。 元组和列表很类似，不同的是元组不可变，这意味着，一旦元组被创建就不能被修改，不然会出现久违的 error 3、字典(dict)：无序的键/值对集合字典是无序且可变的，可以把字典想象成一个两列多行的数据结构。 注意：因为字典是无序的，所以你不要指望编译器会按照你输入的顺序来依次输出它们 同样的，字典也是可以根据你的需求来动态的收缩或扩展。 键 对象 键#2 对象2 键#1 对象1 键#3 对象3 4、集合(set)：无序的唯一对象的集合集合像字典一样没有顺序，它的亮点在于它内部的对象都是唯一的，不允许存在重复的情况。 如果单纯用一对 {} 来给变量赋值，变量的类型会被认定为 dict，如果{}里面只有值，而没有键会被认为set 判断语句1 、if \\ elif \\ else1if x == A: #条件一2 do something for A3elif x == B: #条件二4 do something for B5else: #条件三6 do something for C 注意：if、elif、else 的后面一定要加 : 循环语句在python中，对于已经知道循环次数的循环体或者至少知道预期对象，用 for ，而对于不知道循环次数的循环适合用while. 1、for循环形式: 1for \"变量\" in \"遍历（循环）对象\":2 表达式 比如：依次打印一个列表的内容: 1list1 = [1,3,5,7,9]2for x in list1:3 print(x) 附：range()提到 for 循环, 我就不得不补充一个知识点, 那就是与 for 密不可分的 range()。 range(start, stop, step) 看了它的 API 已经一目了然了, 首位是它循环开始的数, 第二位是它循环结束的数字 （ 注意， 并不包括这个数字 ） , 第三位是它每一次走的步数. 比如range(1,101,10) 就是从 1 开始到 100 结束 , 且每一步的步长是 10. 有时候为了方便就只写一个数字 range(10) 这个的意思就是, 默认从 0 开始， 到 9 结束, 步长默认为 1. 2、while循环形式： 1while \"条件\":2 \"循环体\" 比如，模仿掷色子。因为在掷色子之前我们并不知道要循环几次才能得到我们想要的数字，所以要用while循环. 1import random2#导入random模板3x = random.randint(1, 6) #先产生一个1—6的随机数，如果不是 5，就执行下面的循环4print(x)5#打印产生的随机数6while x != 5:7 x = random.randint(1,6)8 print(x) break和continuebreak : 用于提前结束循环体 利用break，可以改写上面的掷色子小程序 1import random2#导入random模板：调用randint函数产生随机数3while True:4 x = random.randint(1,6)5 print(x)6 if x == 5: break continue : 用于跳过本次循环，再从下一次循环开始。即只要遇到continue，立即放弃本次循环，回到 for/while . enmuerate()在for循环中，如果需要在循环中获取当前的索引值，可以使用enmuerate()函数： 1names = ['梦泪','奥特曼','孙悟空']2for i, name in enmuerate(names):3 print(\"No.&#123;&#125;:&#123;&#125;\".format(i, name)) 1No.0:梦泪2No.1:奥特曼3No.2:孙悟空 formatpy2.6之后新增的函数 : str.format(). 通过 {} 代替 % str.format()函数理论上可以接收无限个参数，而且位置也可以不按顺序. 比如 : （1）不为参数设置指定位置 1&gt;&gt;&gt;\"&#123;&#125; &#123;&#125;\".format(\"hello\", \"lihao\")2'hello lihao' （2）为参数设置指定位置 1&gt;&gt;&gt;\"&#123;1&#125; &#123;0&#125;\".format(\"hello\". \"lihao\")2'lihao hello' try/except 例外处理顾名思义,先 try（尝试） 一下，再用 except 捕捉出现例外的情况. 1while True:2 try:3 int(input(\"what's your age?\"))4 break5 except:6 print(\"please enter a number!\") 为什么要多花几行代码呢？ 目的就是防止用户输入非数字的情况. 迭代器python有一种针对处理有序数据的运算器，即迭代器. 1、 map 函数的用法: 1map(执行的函数, 容器变量) 下面通过一个例子介绍用法: 1def pick(x):2 fruits = ['apple', 'banana', 'orange']3 return fruits[x]4 #定义一个函数,通过索引值返回相应的水果5choices = [1, 2, 0, 0, 2, 1]6result = map(pick, choices)7for choice in result:8 print(choice) 程序的运行结果如下: 1banana2orange3apple4apple5orange6banana 文件文件的读取与写入1f = open(\"文件名\", \"文件处理方式\") 操作 功能 r 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。 w 打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件 a 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入 一般情况下，读取文件的方法有三种 : read(), readline(), readlines(). 从字面意思上来看，read()是一口气读完, readline()像是一下读一行 随记.join()使用 join 函数可以实现数据的有序输出。 print(&#39;\\n&#39;.join([&#39;Name&#39;,&#39;age&#39;,&#39;sex&#39;])) 这样就会输出: 1Name2age3sex split()python中的 split() 函数就是一个切片工具，对字符串进行指定的切割. 1str = '窗外的麻雀在电线杆上多嘴'2print(str.split('线'))3print(type(str.split('线'))) 结果如下： 1['窗外的麻雀在电', '杆上多嘴']2&lt;class 'list'&gt; 返回的是一个列表类型，可以通过索引值得到任何我们想要的内容。","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/Python/"}]},{"title":"C语言小程序","slug":"C语言小程序","date":"2019-12-12T05:16:12.000Z","updated":"2020-01-31T08:10:24.019Z","comments":true,"path":"C语言小程序/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/C%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%A8%8B%E5%BA%8F/","excerpt":"","text":"汉诺塔 lihao 汉诺塔 1/*2将 n 个盘子从 A 移到 C 可以分解为三个步骤：3（1）将 A 上的 n-1 个盘子借助C移动到 B 上；4（2）把 A 上的剩下的一个盘子移动到 C 上；5（3）把 n-1 个盘子从 B 借助 A 移动到 C 上。6*/7#include&lt;stdio.h&gt;8int main()9&#123;10 void hanoi(int n, char one, char two, char three); //声明 hanoi 函数11 int m;12 printf(\"input the number of diskes:\");13 scanf(\"%d\", &amp;m);14 printf(\"The step to move %d diskes:\\n\", m);15 hanoi(m, 'A' , 'B', 'C');16&#125;17void hanoi(int n, char one, char two, char three) //定义 hanoi 函数，其作用是将 n 个盘子从 one 借助 two 移动到 three 的过程18&#123;19 void move(char x, char y); //声明 move 函数20 if(n == 1)21 move(one, three);22 else23 &#123;24 hanoi(n-1, one, three, two);25 move(one, three);26 hanoi(n-1, two, one, three);27 &#125;28&#125;29void move(char x, char y) 定义 move 函数，其作用是表示 x 到 y 的过程30&#123;31 printf(\"%c --&gt; %c\\n\",x, y);32&#125; lihao","categories":[],"tags":[{"name":"C","slug":"C","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/C/"}]},{"title":"C语言笔记","slug":"C笔记","date":"2019-12-05T14:51:31.000Z","updated":"2020-05-30T13:39:51.999Z","comments":true,"path":"C笔记/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/C%E7%AC%94%E8%AE%B0/","excerpt":"","text":"函数 为什么要使用函数函数是什么呢？除了编译软件自带的函数外，用户是否可以自己定义一个函数并调用它呢？如果可以的话，这样将会使代码更加简洁明朗。 一、声明在定义一个函数之前我们要赋予它一个函数名，而所谓函数名其实就是给一个某种功能起一个名字。 用户要定义的函数类型有 void(无类型，即没有返回值)、int（返回整数值）、float、double、char（返回字符）…… 二、定义1、定义无参函数 类型名 函数名() { 函数体 }2、定义有参函数 类型名 函数名(类型+变量) { 函数体 }3、定义空函数 类型名 函数名() { } 三、调用函数1、调用函数之前需要在主函数的第一个语句中声明一下函数，因为编译是从main函数开始编译，当编译到用户定义的函数，如果之前没有对函数进行声明，就会出错。 2、函数的声明语句是一个语句，需要用 ; 结尾 3、在调用过程中，系统会把实参的值传递给形参，而函数的返回值是由 return 语句获得的。函数的类型决定返回值的类型在未出现函数调用的时候，形参并不占用内存单元，发生调用的时候才会临时分配内存单元。调用结束后，形参单元被释放，实参单元仍保留原值。 4、例： 1//先定义函数还是先编写主函数没有什么差别，但本人倾向于先编写2主函数3#include&lt;stdio.h&gt;4int main()5&#123;6 int max(int x,int y); //对max函数声明 “;”不要忘7 int a, b, c;8 printf(\"please input two numbers:\");9 sacnf(\"%d %d\",&amp;a,&amp;b);10 c = max(a,b); //调用max函数11 printf(\"max is %d\",c);12 return 0;13&#125;14int max(int x,int y) //定义max函数，其功能是求两个数中的最大值15&#123;16 int z;17 z = x &gt; y ? x : y;18 return z;19&#125; 四、函数的嵌套1、定义：直接或间接的调用函数本身，称为函数的递归调用。 2、规则：程序中不允许无终止的递归调用，必须加条件限制（if、 while、 for…… ） 3、特点：从一个已知的事实出发，按照一定规律推出下一个事实，再从这个新的已知事实出发，再向下一个新的事实。 3、例:用递归法求 n! 1/*2n 的阶乘就是从一，一直乘到 n;3当 n = 1, n! = 1;4当 n &gt; 1, n! = n * (n - 1)!5下面开始设计程序：6*/7#include&lt;stdio.h&gt;8int main()9&#123;10 int fac(int n); //对fac函数声明11 int n, y;12 printf(\"input one number:\");13 scanf(\"%d\",&amp;n);14 y = fac(n); //调用fac函数，其作用是求一个数的阶乘15 printf(\"%d! = %d\\n\",n, y);16 return 0;17&#125;18int fac(int n) //定义fac函数19&#123;20 int f;21 if(n &lt; 0)22 printf(\"n &lt; 0, error\");23 else if(n == 0 || n == 1)24 f = 1;25 else f = fac(n - 1) * n;26 return f;27&#125; 8.2指针 8.2.1使用指针变量的例子【例8.1】通过指针访问整型变量 1#include&lt;stdio.h&gt;2int main()3&#123;4 int a = 100, b = 10;5 int *p1, *p2; //定义两个指向整型的指针变量6 7 p1 = &amp;a;8 p2 = &amp;b; //把a,b的地址分别赋给它们9 printf(\"a = %d, b = %d\\n\",a,b);10 printf(\"a = %d, b = %d\",*p1,*p2); // “*”作为取值操作符，取出他们所指的整数，即a,b的值11&#125; 【程序分析】 ① 开头定义了两个可以指向整型的指针变量 ② 第六行的 “ * ” 是用来定义指针变量，第11行的 “ * ” 表示指向，即 *p1 就是说指针变量 p1 指向的变量，即为 a 【注意】 ① 定义指针变量的时候必须要有类型名，且它所指向的那个变量的类型也要一样。 ② 指针是用来存放地址的， 指针是地址，指针变量是一个定义的变量。 8.2.2怎样定义指针变量类型名 * 指针变量名; 左端的类型名，比如 “int、float” 被称为基类型 【说明】 ① 指针前面的 “ * “ 表示该变量为指针型变量 ② 在定义指针变量的时候必须指定基类型。一个变量的指针包括两个含义：一是以存储单元的编号表示的纯地址（如编号为2000的字节），一是它指向的存储单元的数据类型（如 int, char, float ） ③ 指向整型数据的指针类型表示为 “ int * “, 读作指向 int 的指针 或是 int 指针 ④ 指针变量只能存放地址（指针） 不能把一个整数赋值给指针变量 8.2.3怎样引用指针变量(1) *：取值操作符 (2) &amp;：取地址操作符； 【例8.2】输入两个整数a,b ，使用先大后小的顺序输出 1#include&lt;stdio.h&gt;2int main()3&#123;4 int a, b;5 int* p, * q;6 printf(\"输入两个整数 : \");7 scanf(\"%d,%d\", &amp;a, &amp;b);8 p = &amp;a;9 q = &amp;b;10 if (a &lt; b)11 &#123;12 int *g;13 g = p; p = q; q = g; //不交换a,b的值，而是交换两个指针变量的值14 &#125;15 printf(\"max = %d, min = %d\", *p, *q);16&#125; 8.2.4指针变量作为函数参数【例8.3】同例8.2，现要求用函数来实现互换 1#include&lt;Stdio.h&gt;2int main()3&#123;4 void swap(int* p1, int* p2);5 int a, b;6 printf(\"请输入两个数字: \");7 scanf_s(\"%d,%d\", &amp;a, &amp;b);8 int* p=&amp;a, * q=&amp;b;9 if (a &lt; b)10 &#123;swap(p, q);&#125;11 printf(\"max = %d,min = %d\", a, b);12 return 0;13&#125;1415void swap(int* p1, int* p2)16&#123;17 int g;18 g = *p1;19 *p1 = *p2;20 *p2 = g;21 return;22&#125; 【疑问1】为什么非要利用指针？比如以下程序呢 1#include&lt;stdio.h&gt;2int main()3&#123;4 void swap(int p, int q);5 int a, b;6 printf(\"请输入两个数 : \");7 scanf_s(\"%d,%d\", &amp;a, &amp;b);8 swap(a, b); 9 printf(\"a = %d, b = %d\", a, b);10 return 0;11&#125;12void swap(int p, int q)13&#123;14 int t;15 t = p;16 p = q;17 q = t;18 return;19&#125; 运行结果是： 1请输入两个数：100,102a = 100, b = 10 并没有完成互换功能 【分析】在主函数中调用的swap函数，把实参a和实参b的值传给了p,q,从而在函数swap中实现了p和q的互换，但是swap运行结束之后p和q的内存就会释放。可以理解为变量的 *生存周期 * 。而函数swap没有任何返回值，输出的a，b当然也没有改变 【疑问2】为什么不能互换地址值呢？ 1#include&lt;stdio.h&gt;2int main()3&#123;4 void swap(int* p1, int* p2);5 int a, b;6 printf(\"请输入两个数 : \");7 scanf_s(\"%d,%d\", &amp;a, &amp;b);8 int *p = &amp;a, *q = &amp;b;9 swap(p, q); 10 printf(\"a = %d, b = %d\", a, b);11 return 0;12&#125;13void swap(int* p1, int* p2)14&#123;15 int* t;16 t = p1;17 p1 = p2;18 p2 = t;19 return;20&#125; 输出结果是： 1请输入两个数 : 32,652a = 32, b = 65 很显然也没有改变。 【分析】 很显然，swap函数中只是把p1和p2的内容（即地址）变换了，p1的内容变成了4000H，p2的内容变成了3000H，就是说p1指向了q，p2指向了p。但是并不影响p,q的指向，更改变不了a，b的值。 C语言中实参变量和形参变量之间的数据传递是单向的 “值传递” 方式 【例8.4】输入三个数，从大到小输出。 1#include&lt;stdio.h&gt;2int main()3&#123;4 void exchange(int* p1, int* p2, int* p3);5 void swap(int* k1, int* k2);67 int a, b, c;8 printf(\"请输入三个数 : \");9 scanf_s(\"%d,%d,%d\", &amp;a, &amp;b, &amp;c);1011 int* q1 = &amp;a, * q2 = &amp;b, * q3 = &amp;c;12 exchange(q1, q2, q3);13 printf(\"%d,%d,%d\", a, b, c);1415 return 0;16&#125;17void exchange(int* p1, int* p2, int* p3)18&#123;19 void swap(int* k1, int* k2);20 if (*p1 &lt; *p2) &#123; swap(p1, p2); &#125;21 if (*p2 &lt; *p3) &#123; swap(p2, p3); &#125;22 if (*p1 &lt; *p2) &#123; swap(p1, p2); &#125;23 24 return;25&#125;26void swap(int* k1, int* k2)27&#123;28 int t;29 t = *k1;30 *k1 = *k2;31 *k2 = t;3233 return;34&#125; 8.3数组和指针8.3.1数组元素的指针在C语言中，数组名代表数组中首元素的地址。因此下面的两个表示方法等价 p = &amp;a[0]; p = a; 8.3.2引用数组元素时指针的运算指针就是地址，那么地址能否进行算术运算呢？答案是：在一定条件下可以进行加减乘除算术运算的。 当指针指向一个数组元素的时候： （1）p+1指向同一数组中的下一个元素，p-1指向同一数组中的下一元素。 （2）p+i 或 a+i 就是数组元素a[i] 的地址。 （3）*(p+i) 或 *(a+i) 就是数组元素a[i] 的值。 （4）如果指针变量 p1 和 p2 都指向同一数组中的元素，则 p2-p1 结果就是 p2-p1 的值（两个地址之差）除以数组元素的长度（数据类型所占的字节）。 8.3.3通过指针引用数组元素引用一个数组，可以用下面两种方法： （1）下标法，如a[i]形式； （2）指针法，如*(a+i) 或 *(p+i); 【例8.5】输出整型数组a的全部元素 1#include&lt;stdio.h&gt;2int main()3&#123;4 int a[10] = &#123;0,1,2,3,4,5,6,7,8,9&#125;;5 int *p;6 for(p=a;p&lt;(a+10);p++)7 printf(\"%d \",*p);8 9 return 0;10&#125; 【分析】 第八行p指针变量指向了数组a的首地址，在小于(a+10)即a[10]的范围内进行自加运算，知道循环结束。 【例8.6】通过指针变量输出数组a的10个元素 1#include&lt;stdio.h&gt;2int main()3&#123;4 int* p, i, a[10];5 p = a;6 printf(\"请输入十个数: \");7 for (i = 0; i &lt; 10; i++)8 scanf_s(\"%d,\", p++);9 for (i = 0; i &lt; 10; i++, p++)10 printf(\"%d \", *p);1112 return 0;13&#125; 运行结果如下： 1请输入十个数: 1,2,3,4,5,6,7,8,9,02-858993460 -858993460 -858993460 -858993460 -858993460 -858993460 -858993460 -858993460 -858993460 -858993460 【程序分析】在第一个 for 循环后，指针变量 p 就已经指向了数组元素的最后一个位置 ，如果再进行输出，那么存储单元的值就是不可预料的。但实际上，指针变量可以指向数组以后的存储单元，就算元素不存在这个数组中，C编译器并不认为它是非法的，但是输出结果却不理想。解决办法就是在第一个for循环之后，第二个for循环之前，加上一句：p = a;相当于让指针重新指向了数组的首元素的地址。 8.3.4用数组名做函数参数例如： 1int main()2&#123;3 void fun(int a[], int n); //对fun函数声明4 int arr[10]; //定义a数组5 :6 : 7 fun(arr,10); //用数组名做参数8&#125;9void fun(int a[], int n) //定义fun函数10&#123;11 :12&#125; arr是实参数组名，a是形参数组名。当用数组名做参数时，如果形参数组中各元素的值发生变化，实参数组元素的值也发生变化。 【说明】C语言调用函数时虚实结合的方法都是采用“值传递”的方式，当用变量名作为函数参数时传递的是变量的值，当用数组名作为函数参数时，由于数组名代表的是数组首元素的地址，因此传递的值是地址，所以要求形参为指针变量。 实参数组名代表该数组首元素的地址，而形参是用来接受从实参传递过来的数组首元素地址的。因此，形参数组应该是一个指针变量（只有指针变量才能存放地址）。也就是说： fun(int a[], int n); 等价于 fun(int *a, int n); 【例8.7】将数组 a 中 n 个整数按相反顺序存放 1#include&lt;stdio.h&gt;2int main()3&#123;4 void inv(int *x, int n); //对inv函数进行声明5 int a[10]= &#123; 0,1,2,3,4,5,6,7,8,9 &#125;; //初始化a数组6 int* p = a; //如果不赋予确定值，就会出错7 inv(p, 10); //用指针变量做参数8 for (p = a; p &lt; a+10; p++)9 printf(\"%d \", *p);10&#125;11void inv(int *x, int n) //定义inv函数，指针变量作为形参12&#123;13 int* p, t, * i, * j;14 i = x; j = x + n - 1; p = x + (n-1)/2; //把第一个与最后一个进行互换，第二个和倒数第二个互换，以此类推...15 for ( ;i &lt;= p; i++, j--)16 &#123;t = *i; *i = *j; *j = t;&#125;17 return;18&#125; 【归纳分析】如果有一个实参数组，要想在函数中改变此数组中的元素的值，实参与形参的对应关系有四种： （1）形参与实参都用数组名 （2）实参用数组名，形参用指针变量 （3）实参形参都用指针变量 （4）实参为指针变量，形参为数组名 【注意】如果用指针变量作为实参，必须先使指针变量有确定值，指向一个已定义的对象。","categories":[],"tags":[{"name":"C","slug":"C","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/C/"}]},{"title":"Wonderful moment","slug":"filename","date":"2019-11-30T07:07:23.000Z","updated":"2020-01-03T06:11:54.524Z","comments":true,"path":"filename/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/filename/","excerpt":"","text":"2019年11月25日中午，刚考完线代，下着小雨，我踏上了开往淮北的列车。 这是我们冷战结束的第一天，心里总觉得有些愧疚。就这样，我秘密的买好了票，想要给她一个惊喜。我事先骗她到操场走走，然后我们在操场“偶遇”。果然，这傻不啦叽的女孩，第一反应居然是发型凌乱。我们抱了许久，仔细想想好像很久都没有这样了，仿佛能听到她简单纯粹的激动和开心，那一刻，失望和不满荡然无存。这是异地恋的无奈……我们一起度过了美好的两天，等她下课，一起吃食堂，陪她打卡。我想尽量在属于她的世界里尽量留下我来过的痕迹，就当是我走后的温存吧。 亲爱的，下次见。","categories":[],"tags":[{"name":"diary","slug":"diary","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/diary/"}]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2019-11-29T02:45:04.000Z","updated":"2020-01-03T06:12:04.977Z","comments":true,"path":"我的第一篇博客/","link":"","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"历时两天，我的博客网站终于搭建完成，对于一个小白来说，这的确有些不容易，不过好在成功了。其实之前是没有这个想法的，但是最近有些朋友弄了，我当然也要玩玩。虽然现在我才19岁，但是十九年里发生的事我很多都不记得，我有时想，如果那些痕迹、那些有价值的事物都被忘记的话，那不仅仅是一个人，而是和他关联的一部分就自然而然地消失了啊。希望我能坚持写下去，记录生活的沙子、拾取成长的贝壳。","categories":[],"tags":[{"name":"diary","slug":"diary","permalink":"https://github.com/MineWelt/MineWelt.github.io.git/blog/tags/diary/"}]}]}